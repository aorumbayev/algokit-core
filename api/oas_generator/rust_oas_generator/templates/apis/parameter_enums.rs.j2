/*
 * Parameter Enums for {{ spec.info.title }}
 *
 * Auto-generated enums for parameters with constrained string values.
 *
 * Generated by: Rust OpenAPI Generator
 */

use serde::{Deserialize, Serialize};
use std::fmt;
use std::str::FromStr;

{% for enum_name, enum_data in parameter_enums.items() %}
{% if enum_data.enum_values %}
{{ (enum_data.description or "Parameter enum for " + enum_name.lower()) | rust_doc_comment }}
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum {{ enum_name }} {
{% for value in enum_data.enum_values %}
    /// {{ value }}
    {% if value == "json" %}Json{% elif value == "msgpack" %}Msgpack{% else %}{{ value | pascal_case }}{% endif %},
{% endfor %}
}

impl fmt::Display for {{ enum_name }} {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = match self {
{% for value in enum_data.enum_values %}
            {{ enum_name }}::{% if value == "json" %}Json{% elif value == "msgpack" %}Msgpack{% else %}{{ value | pascal_case }}{% endif %} => "{{ value }}",
{% endfor %}
        };
        write!(f, "{}", value)
    }
}

impl FromStr for {{ enum_name }} {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
{% for value in enum_data.enum_values %}
            "{{ value }}" => Ok({{ enum_name }}::{% if value == "json" %}Json{% elif value == "msgpack" %}Msgpack{% else %}{{ value | pascal_case }}{% endif %}),
{% endfor %}
            _ => Err(format!("Invalid {{ enum_name }}: {}", s)),
        }
    }
}

{% endif %}
{% endfor %}
