/*
 * {{ spec.info.title }}
 *
 * {{ spec.info.description or "API client generated from OpenAPI specification" }}
 *
 * The version of the OpenAPI document: {{ spec.info.version }}
 {% if spec.info.contact and spec.info.contact.email %} * Contact: {{ spec.info.contact.email }}
 {% endif %} * Generated by: Rust OpenAPI Generator
 */

use super::Error;
use algokit_http_client::{DefaultHttpClient, HttpClient};
use std::sync::Arc;
{% if collect_parameter_enums(operations) %}
use super::parameter_enums::*;
{% endif %}
{% if operations %}
{% set used_types = [] %}
{% for operation in operations %}
    {% set operation_types = get_operation_used_types(operation) %}
    {% for type_name in operation_types %}
        {% if type_name not in used_types %}
            {% set _ = used_types.append(type_name) %}
        {% endif %}
    {% endfor %}
    {# Also collect request body types #}
    {% if has_request_body(operation) %}
        {% set request_body_type = get_request_body_type(operation) %}
        {% if request_body_type and should_import_request_body_type(request_body_type) and request_body_type not in used_types %}
            {% set _ = used_types.append(request_body_type) %}
        {% endif %}
    {% endif %}
{% endfor %}
{% if used_types %}
use crate::models::{
{% for used_type in used_types %}
    {{ used_type }},
{% endfor %}
};
{% endif %}
{% endif %}

/// The main Algod API client.
///
/// This client provides convenient access to all Algod API endpoints.
/// It wraps the lower-level endpoint functions with a more ergonomic interface.
/// All methods return a unified `Error` type that can represent any endpoint error.
#[derive(Clone)]
pub struct AlgodClient {
    http_client: Arc<dyn HttpClient>,
}

impl AlgodClient {
    /// Create a new AlgodClient with a custom http client.
    pub fn new(http_client: Arc<dyn HttpClient>) -> Self {
        Self { http_client }
    }

    /// Create a new AlgodClient for Algorand TestNet.
    #[cfg(feature = "default_client")]
    pub fn testnet() -> Self {
        let http_client =
            Arc::new(DefaultHttpClient::new("https://testnet-api.4160.nodely.dev"));
        Self::new(http_client)
    }

    /// Create a new AlgodClient for Algorand MainNet.
    #[cfg(feature = "default_client")]
    pub fn mainnet() -> Self {
        let http_client =
            Arc::new(DefaultHttpClient::new("https://mainnet-api.4160.nodely.dev"));
        Self::new(http_client)
    }

    /// Create a new AlgodClient for a local localnet environment.
    #[cfg(feature = "default_client")]
    pub fn localnet() -> Self {
        let http_client = Arc::new(DefaultHttpClient::with_header(
            "http://localhost:4001",
            "X-Algo-API-Token",
            "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
        ).expect("Failed to create HTTP client with X-Algo-API-Token header"));
        Self::new(http_client)
    }

{% for operation in operations %}
    {% if operation.summary %}
    /// {{ operation.summary }}
    {% elif operation.description %}
    /// {{ operation.description | replace('\n', '\n    /// ') }}
    {% endif %}
    {% if operation.deprecated %}
    #[deprecated]
    {% endif %}
    pub async fn {{ operation.rust_function_name }}(
        &self,
    {% if has_request_body(operation) %}
        {% set request_body_name = get_request_body_name(operation) %}
        {% set request_body_type = get_request_body_type(operation) %}
        {% if is_request_body_required(operation) %}{{ request_body_name }}: {{ request_body_type }},
        {% else %}{{ request_body_name }}: Option<{{ request_body_type }}>,
        {% endif %}
    {% endif %}
    {% for param in operation.parameters %}
        {% if param.is_enum_parameter %}
        {% if param.required %}{{ param.rust_name }}: {{ param.rust_enum_type }},
        {% else %}{{ param.rust_name }}: Option<{{ param.rust_enum_type }}>,
        {% endif %}
        {% else %}
        {% if param.required %}{{ param.rust_name }}: {% if param.rust_type == "String" %}&str{% else %}{{ param.rust_type }}{% endif %},
        {% else %}{{ param.rust_name }}: Option<{% if param.rust_type == "String" %}&str{% else %}{{ param.rust_type }}{% endif %}>,
        {% endif %}
        {% endif %}
    {% endfor %}
    ) -> Result<{% if get_success_response_type(operation) %}{{ get_success_response_type(operation) }}{% else %}(){% endif %}, Error> {
        super::{{ operation.rust_function_name }}::{{ operation.rust_function_name }}(
            self.http_client.as_ref(),
        {% if has_request_body(operation) %}
            {{ get_request_body_name(operation) }},
        {% endif %}
        {% for param in operation.parameters %}
            {% if param.is_enum_parameter %}
            {{ param.rust_name }},
            {% else %}
            {{ param.rust_name }},
            {% endif %}
        {% endfor %}
        ).await
    }

{% endfor %}
}
