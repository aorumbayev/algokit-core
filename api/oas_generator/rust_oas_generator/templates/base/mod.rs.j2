/*
 * {{ spec.info.title }}
 *
 * {{ spec.info.description or "API client generated from OpenAPI specification" }}
 *
 * The version of the OpenAPI document: {{ spec.info.version }}
 {% if spec.info.contact and spec.info.contact.email %} * Contact: {{ spec.info.contact.email }}
 {% endif %} * Generated by: Rust OpenAPI Generator
 */

use reqwest;
use serde::{Deserialize, Serialize};

pub mod configuration;

// Individual endpoint modules
{% for operation in operations %}
pub mod {{ operation.rust_function_name }};
{% endfor %}

#[derive(Debug, Clone)]
pub struct ResponseContent<T> {
    pub status: reqwest::StatusCode,
    pub content: String,
    pub entity: Option<T>,
}

#[derive(Debug)]
pub enum Error<T> {
    Reqwest(reqwest::Error),
    Serde(serde_json::Error),
    Io(std::io::Error),
    ResponseError(ResponseContent<T>),
}

impl <T> From<reqwest::Error> for Error<T> {
    fn from(e: reqwest::Error) -> Self {
        Error::Reqwest(e)
    }
}

impl <T> From<serde_json::Error> for Error<T> {
    fn from(e: serde_json::Error) -> Self {
        Error::Serde(e)
    }
}

impl <T> From<std::io::Error> for Error<T> {
    fn from(e: std::io::Error) -> Self {
        Error::Io(e)
    }
}

pub fn urlencode<T: AsRef<str>>(s: T) -> String {
    ::url::form_urlencoded::byte_serialize(s.as_ref().as_bytes()).collect()
}

{% set content_types = spec.content_types %}
{% set has_text_plain = "text/plain" in content_types %}
{% set has_msgpack = spec.has_msgpack_operations %}
#[derive(Debug, PartialEq)]
pub enum ContentType {
    Json,
    {% if has_text_plain %}Text,
    {% endif %}
    {% if has_msgpack %}MsgPack,
    {% endif %}
    Unsupported(String),
}

impl From<&str> for ContentType {
    fn from(content_type: &str) -> Self {
        if content_type.starts_with("application") && content_type.contains("json") {
            Self::Json
        {% if has_text_plain %}
        } else if content_type.starts_with("text/plain") {
            Self::Text
        {% endif %}
        {% if has_msgpack %}
        } else if content_type.starts_with("application/msgpack") {
            Self::MsgPack
        {% endif %}
        } else {
            Self::Unsupported(content_type.to_string())
        }
    }
}

// Re-export all endpoint functions
{% for operation in operations %}
pub use {{ operation.rust_function_name }}::{
    {{ operation.rust_function_name }},
    {{ operation.rust_error_enum }},
};
{% endfor %}

