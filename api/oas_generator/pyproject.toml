[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "rust-oas-generator"
version = "1.0.0"
description = "A Jinja2-based generator that produces Rust API clients from OpenAPI specifications"
readme = "README.md"
authors = [{ name = "AlgoKit Core Team" }]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.12"
dependencies = ["jinja2>=3.0.0"]

[project.optional-dependencies]
dev = ["pytest>=8.0.0", "ruff>=0.1.0", "mypy>=1.0.0"]

[project.scripts]
rust_oas_generator = "rust_oas_generator.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["src/rust_oas_generator"]

[tool.hatch.build.targets.sdist]
include = ["src/", "README.md", "LICENSE"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

target-version = "py312"
line-length = 120
lint.select = [
  "F",   # pyflakes
  "E",
  "W",   # pycodestyle
  "C90", # mccabe
  "I",   # isort
  "N",   # PEP8 naming
  "UP",  # pyupgrade
  "YTT", # flake8-2020
  "ANN", # flake8-annotations
  "FBT", # flake8-boolean-trap
  "B",   # flake8-bugbear
  "A",   # flake8-builtins
  "C4",  # flake8-comprehensions
  "DTZ", # flake8-datetimez
  "T10", # flake8-debugger
  "ISC", # flake8-implicit-str-concat
  "ICN", # flake8-import-conventions
  "PIE", # flake8-pie
  "T20", # flake8-print
  "PYI", # flake8-pyi
  "PT",  # flake8-pytest-style
  "Q",   # flake8-quotes
  "RSE", # flake8-raise
  "RET", # flake8-return
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "ARG", # flake8-unused-arguments
  "PTH", # flake8-use-pathlib
  "ERA", # eradicate
  "PGH", # pygrep-hooks
  "PL",  # pylint
  "RUF", # Ruff-specific rules
]
lint.ignore = [
  "T201",   # Allow print statements in CLI tools
  "BLE001", # Allow catching general exceptions in CLI
  "EXE001", # Allow non-executable scripts
  "TID252", # Allow relative imports within package
]

# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = ["ALL"]
lint.unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = false
implicit_reexport = false
show_error_codes = true

[tool.uv]
dev-dependencies = ["mypy>=1.14.1", "pytest>=8.3.5", "ruff>=0.12.0"]
