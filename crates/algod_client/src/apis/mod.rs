/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

// Consolidated client
pub mod client;

// Parameter enums for type-safe API parameters
pub mod parameter_enums;

// Individual endpoint modules
pub mod abort_catchup;
pub mod account_application_information;
pub mod account_asset_information;
pub mod account_assets_information;
pub mod account_information;
pub mod add_participation_key;
pub mod append_keys;
pub mod delete_participation_key_by_id;
pub mod experimental_check;
pub mod generate_participation_keys;
pub mod get_application_box_by_name;
pub mod get_application_boxes;
pub mod get_application_by_id;
pub mod get_asset_by_id;
pub mod get_block;
pub mod get_block_hash;
pub mod get_block_logs;
pub mod get_block_time_stamp_offset;
pub mod get_block_txids;
pub mod get_config;
pub mod get_debug_settings_prof;
pub mod get_genesis;
pub mod get_ledger_state_delta;
pub mod get_ledger_state_delta_for_transaction_group;
pub mod get_light_block_header_proof;
pub mod get_participation_key_by_id;
pub mod get_participation_keys;
pub mod get_pending_transactions;
pub mod get_pending_transactions_by_address;
pub mod get_ready;
pub mod get_state_proof;
pub mod get_status;
pub mod get_supply;
pub mod get_sync_round;
pub mod get_transaction_group_ledger_state_deltas_for_round;
pub mod get_transaction_proof;
pub mod get_version;
pub mod health_check;
pub mod metrics;
pub mod pending_transaction_information;
pub mod put_debug_settings_prof;
pub mod raw_transaction;
pub mod raw_transaction_async;
pub mod set_block_time_stamp_offset;
pub mod set_sync_round;
pub mod shutdown_node;
pub mod simulate_transaction;
pub mod start_catchup;
pub mod swagger_json;
pub mod teal_compile;
pub mod teal_disassemble;
pub mod teal_dryrun;
pub mod transaction_params;
pub mod unset_sync_round;
pub mod wait_for_block;

use snafu::Snafu;

/// Unified error type that can represent any API error from any endpoint
#[derive(Debug, Snafu)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum AlgodApiError {
    #[snafu(display("Health_check error: {error:?}"))]
    HealthCheck { error: health_check::HealthCheckError },
    #[snafu(display("Get_ready error: {error:?}"))]
    GetReady { error: get_ready::GetReadyError },
    #[snafu(display("Metrics error: {error:?}"))]
    Metrics { error: metrics::MetricsError },
    #[snafu(display("Get_genesis error: {error:?}"))]
    GetGenesis { error: get_genesis::GetGenesisError },
    #[snafu(display("Swagger_json error: {error:?}"))]
    SwaggerJson { error: swagger_json::SwaggerJsonError },
    #[snafu(display("Get_version error: {error:?}"))]
    GetVersion { error: get_version::GetVersionError },
    #[snafu(display("Get_debug_settings_prof error: {error:?}"))]
    GetDebugSettingsProf { error: get_debug_settings_prof::GetDebugSettingsProfError },
    #[snafu(display("Put_debug_settings_prof error: {error:?}"))]
    PutDebugSettingsProf { error: put_debug_settings_prof::PutDebugSettingsProfError },
    #[snafu(display("Get_config error: {error:?}"))]
    GetConfig { error: get_config::GetConfigError },
    #[snafu(display("Account_information error: {error:?}"))]
    AccountInformation { error: account_information::AccountInformationError },
    #[snafu(display("Account_asset_information error: {error:?}"))]
    AccountAssetInformation { error: account_asset_information::AccountAssetInformationError },
    #[snafu(display("Account_assets_information error: {error:?}"))]
    AccountAssetsInformation { error: account_assets_information::AccountAssetsInformationError },
    #[snafu(display("Account_application_information error: {error:?}"))]
    AccountApplicationInformation { error: account_application_information::AccountApplicationInformationError },
    #[snafu(display("Get_pending_transactions_by_address error: {error:?}"))]
    GetPendingTransactionsByAddress { error: get_pending_transactions_by_address::GetPendingTransactionsByAddressError },
    #[snafu(display("Get_block error: {error:?}"))]
    GetBlock { error: get_block::GetBlockError },
    #[snafu(display("Get_block_txids error: {error:?}"))]
    GetBlockTxids { error: get_block_txids::GetBlockTxidsError },
    #[snafu(display("Get_block_hash error: {error:?}"))]
    GetBlockHash { error: get_block_hash::GetBlockHashError },
    #[snafu(display("Get_transaction_proof error: {error:?}"))]
    GetTransactionProof { error: get_transaction_proof::GetTransactionProofError },
    #[snafu(display("Get_block_logs error: {error:?}"))]
    GetBlockLogs { error: get_block_logs::GetBlockLogsError },
    #[snafu(display("Get_supply error: {error:?}"))]
    GetSupply { error: get_supply::GetSupplyError },
    #[snafu(display("Get_participation_keys error: {error:?}"))]
    GetParticipationKeys { error: get_participation_keys::GetParticipationKeysError },
    #[snafu(display("Add_participation_key error: {error:?}"))]
    AddParticipationKey { error: add_participation_key::AddParticipationKeyError },
    #[snafu(display("Generate_participation_keys error: {error:?}"))]
    GenerateParticipationKeys { error: generate_participation_keys::GenerateParticipationKeysError },
    #[snafu(display("Get_participation_key_by_id error: {error:?}"))]
    GetParticipationKeyById { error: get_participation_key_by_id::GetParticipationKeyByIdError },
    #[snafu(display("Append_keys error: {error:?}"))]
    AppendKeys { error: append_keys::AppendKeysError },
    #[snafu(display("Delete_participation_key_by_id error: {error:?}"))]
    DeleteParticipationKeyById { error: delete_participation_key_by_id::DeleteParticipationKeyByIdError },
    #[snafu(display("Shutdown_node error: {error:?}"))]
    ShutdownNode { error: shutdown_node::ShutdownNodeError },
    #[snafu(display("Get_status error: {error:?}"))]
    GetStatus { error: get_status::GetStatusError },
    #[snafu(display("Wait_for_block error: {error:?}"))]
    WaitForBlock { error: wait_for_block::WaitForBlockError },
    #[snafu(display("Raw_transaction error: {error:?}"))]
    RawTransaction { error: raw_transaction::RawTransactionError },
    #[snafu(display("Raw_transaction_async error: {error:?}"))]
    RawTransactionAsync { error: raw_transaction_async::RawTransactionAsyncError },
    #[snafu(display("Simulate_transaction error: {error:?}"))]
    SimulateTransaction { error: simulate_transaction::SimulateTransactionError },
    #[snafu(display("Transaction_params error: {error:?}"))]
    TransactionParams { error: transaction_params::TransactionParamsError },
    #[snafu(display("Get_pending_transactions error: {error:?}"))]
    GetPendingTransactions { error: get_pending_transactions::GetPendingTransactionsError },
    #[snafu(display("Pending_transaction_information error: {error:?}"))]
    PendingTransactionInformation { error: pending_transaction_information::PendingTransactionInformationError },
    #[snafu(display("Get_ledger_state_delta error: {error:?}"))]
    GetLedgerStateDelta { error: get_ledger_state_delta::GetLedgerStateDeltaError },
    #[snafu(display("Get_transaction_group_ledger_state_deltas_for_round error: {error:?}"))]
    GetTransactionGroupLedgerStateDeltasForRound { error: get_transaction_group_ledger_state_deltas_for_round::GetTransactionGroupLedgerStateDeltasForRoundError },
    #[snafu(display("Get_ledger_state_delta_for_transaction_group error: {error:?}"))]
    GetLedgerStateDeltaForTransactionGroup { error: get_ledger_state_delta_for_transaction_group::GetLedgerStateDeltaForTransactionGroupError },
    #[snafu(display("Get_state_proof error: {error:?}"))]
    GetStateProof { error: get_state_proof::GetStateProofError },
    #[snafu(display("Get_light_block_header_proof error: {error:?}"))]
    GetLightBlockHeaderProof { error: get_light_block_header_proof::GetLightBlockHeaderProofError },
    #[snafu(display("Get_application_by_id error: {error:?}"))]
    GetApplicationById { error: get_application_by_id::GetApplicationByIdError },
    #[snafu(display("Get_application_boxes error: {error:?}"))]
    GetApplicationBoxes { error: get_application_boxes::GetApplicationBoxesError },
    #[snafu(display("Get_application_box_by_name error: {error:?}"))]
    GetApplicationBoxByName { error: get_application_box_by_name::GetApplicationBoxByNameError },
    #[snafu(display("Get_asset_by_id error: {error:?}"))]
    GetAssetById { error: get_asset_by_id::GetAssetByIdError },
    #[snafu(display("Get_sync_round error: {error:?}"))]
    GetSyncRound { error: get_sync_round::GetSyncRoundError },
    #[snafu(display("Unset_sync_round error: {error:?}"))]
    UnsetSyncRound { error: unset_sync_round::UnsetSyncRoundError },
    #[snafu(display("Set_sync_round error: {error:?}"))]
    SetSyncRound { error: set_sync_round::SetSyncRoundError },
    #[snafu(display("Teal_compile error: {error:?}"))]
    TealCompile { error: teal_compile::TealCompileError },
    #[snafu(display("Teal_disassemble error: {error:?}"))]
    TealDisassemble { error: teal_disassemble::TealDisassembleError },
    #[snafu(display("Start_catchup error: {error:?}"))]
    StartCatchup { error: start_catchup::StartCatchupError },
    #[snafu(display("Abort_catchup error: {error:?}"))]
    AbortCatchup { error: abort_catchup::AbortCatchupError },
    #[snafu(display("Teal_dryrun error: {error:?}"))]
    TealDryrun { error: teal_dryrun::TealDryrunError },
    #[snafu(display("Experimental_check error: {error:?}"))]
    ExperimentalCheck { error: experimental_check::ExperimentalCheckError },
    #[snafu(display("Get_block_time_stamp_offset error: {error:?}"))]
    GetBlockTimeStampOffset { error: get_block_time_stamp_offset::GetBlockTimeStampOffsetError },
    #[snafu(display("Set_block_time_stamp_offset error: {error:?}"))]
    SetBlockTimeStampOffset { error: set_block_time_stamp_offset::SetBlockTimeStampOffsetError },
    #[snafu(display("Unknown API error: {message}"))]
    Unknown { message: String },
}

impl From<health_check::HealthCheckError> for AlgodApiError {
    fn from(err: health_check::HealthCheckError) -> Self {
        AlgodApiError::HealthCheck { error: err }
    }
}

impl From<get_ready::GetReadyError> for AlgodApiError {
    fn from(err: get_ready::GetReadyError) -> Self {
        AlgodApiError::GetReady { error: err }
    }
}

impl From<metrics::MetricsError> for AlgodApiError {
    fn from(err: metrics::MetricsError) -> Self {
        AlgodApiError::Metrics { error: err }
    }
}

impl From<get_genesis::GetGenesisError> for AlgodApiError {
    fn from(err: get_genesis::GetGenesisError) -> Self {
        AlgodApiError::GetGenesis { error: err }
    }
}

impl From<swagger_json::SwaggerJsonError> for AlgodApiError {
    fn from(err: swagger_json::SwaggerJsonError) -> Self {
        AlgodApiError::SwaggerJson { error: err }
    }
}

impl From<get_version::GetVersionError> for AlgodApiError {
    fn from(err: get_version::GetVersionError) -> Self {
        AlgodApiError::GetVersion { error: err }
    }
}

impl From<get_debug_settings_prof::GetDebugSettingsProfError> for AlgodApiError {
    fn from(err: get_debug_settings_prof::GetDebugSettingsProfError) -> Self {
        AlgodApiError::GetDebugSettingsProf { error: err }
    }
}

impl From<put_debug_settings_prof::PutDebugSettingsProfError> for AlgodApiError {
    fn from(err: put_debug_settings_prof::PutDebugSettingsProfError) -> Self {
        AlgodApiError::PutDebugSettingsProf { error: err }
    }
}

impl From<get_config::GetConfigError> for AlgodApiError {
    fn from(err: get_config::GetConfigError) -> Self {
        AlgodApiError::GetConfig { error: err }
    }
}

impl From<account_information::AccountInformationError> for AlgodApiError {
    fn from(err: account_information::AccountInformationError) -> Self {
        AlgodApiError::AccountInformation { error: err }
    }
}

impl From<account_asset_information::AccountAssetInformationError> for AlgodApiError {
    fn from(err: account_asset_information::AccountAssetInformationError) -> Self {
        AlgodApiError::AccountAssetInformation { error: err }
    }
}

impl From<account_assets_information::AccountAssetsInformationError> for AlgodApiError {
    fn from(err: account_assets_information::AccountAssetsInformationError) -> Self {
        AlgodApiError::AccountAssetsInformation { error: err }
    }
}

impl From<account_application_information::AccountApplicationInformationError> for AlgodApiError {
    fn from(err: account_application_information::AccountApplicationInformationError) -> Self {
        AlgodApiError::AccountApplicationInformation { error: err }
    }
}

impl From<get_pending_transactions_by_address::GetPendingTransactionsByAddressError>
    for AlgodApiError
{
    fn from(
        err: get_pending_transactions_by_address::GetPendingTransactionsByAddressError,
    ) -> Self {
        AlgodApiError::GetPendingTransactionsByAddress { error: err }
    }
}

impl From<get_block::GetBlockError> for AlgodApiError {
    fn from(err: get_block::GetBlockError) -> Self {
        AlgodApiError::GetBlock { error: err }
    }
}

impl From<get_block_txids::GetBlockTxidsError> for AlgodApiError {
    fn from(err: get_block_txids::GetBlockTxidsError) -> Self {
        AlgodApiError::GetBlockTxids { error: err }
    }
}

impl From<get_block_hash::GetBlockHashError> for AlgodApiError {
    fn from(err: get_block_hash::GetBlockHashError) -> Self {
        AlgodApiError::GetBlockHash { error: err }
    }
}

impl From<get_transaction_proof::GetTransactionProofError> for AlgodApiError {
    fn from(err: get_transaction_proof::GetTransactionProofError) -> Self {
        AlgodApiError::GetTransactionProof { error: err }
    }
}

impl From<get_block_logs::GetBlockLogsError> for AlgodApiError {
    fn from(err: get_block_logs::GetBlockLogsError) -> Self {
        AlgodApiError::GetBlockLogs { error: err }
    }
}

impl From<get_supply::GetSupplyError> for AlgodApiError {
    fn from(err: get_supply::GetSupplyError) -> Self {
        AlgodApiError::GetSupply { error: err }
    }
}

impl From<get_participation_keys::GetParticipationKeysError> for AlgodApiError {
    fn from(err: get_participation_keys::GetParticipationKeysError) -> Self {
        AlgodApiError::GetParticipationKeys { error: err }
    }
}

impl From<add_participation_key::AddParticipationKeyError> for AlgodApiError {
    fn from(err: add_participation_key::AddParticipationKeyError) -> Self {
        AlgodApiError::AddParticipationKey { error: err }
    }
}

impl From<generate_participation_keys::GenerateParticipationKeysError> for AlgodApiError {
    fn from(err: generate_participation_keys::GenerateParticipationKeysError) -> Self {
        AlgodApiError::GenerateParticipationKeys { error: err }
    }
}

impl From<get_participation_key_by_id::GetParticipationKeyByIdError> for AlgodApiError {
    fn from(err: get_participation_key_by_id::GetParticipationKeyByIdError) -> Self {
        AlgodApiError::GetParticipationKeyById { error: err }
    }
}

impl From<append_keys::AppendKeysError> for AlgodApiError {
    fn from(err: append_keys::AppendKeysError) -> Self {
        AlgodApiError::AppendKeys { error: err }
    }
}

impl From<delete_participation_key_by_id::DeleteParticipationKeyByIdError> for AlgodApiError {
    fn from(err: delete_participation_key_by_id::DeleteParticipationKeyByIdError) -> Self {
        AlgodApiError::DeleteParticipationKeyById { error: err }
    }
}

impl From<shutdown_node::ShutdownNodeError> for AlgodApiError {
    fn from(err: shutdown_node::ShutdownNodeError) -> Self {
        AlgodApiError::ShutdownNode { error: err }
    }
}

impl From<get_status::GetStatusError> for AlgodApiError {
    fn from(err: get_status::GetStatusError) -> Self {
        AlgodApiError::GetStatus { error: err }
    }
}

impl From<wait_for_block::WaitForBlockError> for AlgodApiError {
    fn from(err: wait_for_block::WaitForBlockError) -> Self {
        AlgodApiError::WaitForBlock { error: err }
    }
}

impl From<raw_transaction::RawTransactionError> for AlgodApiError {
    fn from(err: raw_transaction::RawTransactionError) -> Self {
        AlgodApiError::RawTransaction { error: err }
    }
}

impl From<raw_transaction_async::RawTransactionAsyncError> for AlgodApiError {
    fn from(err: raw_transaction_async::RawTransactionAsyncError) -> Self {
        AlgodApiError::RawTransactionAsync { error: err }
    }
}

impl From<simulate_transaction::SimulateTransactionError> for AlgodApiError {
    fn from(err: simulate_transaction::SimulateTransactionError) -> Self {
        AlgodApiError::SimulateTransaction { error: err }
    }
}

impl From<transaction_params::TransactionParamsError> for AlgodApiError {
    fn from(err: transaction_params::TransactionParamsError) -> Self {
        AlgodApiError::TransactionParams { error: err }
    }
}

impl From<get_pending_transactions::GetPendingTransactionsError> for AlgodApiError {
    fn from(err: get_pending_transactions::GetPendingTransactionsError) -> Self {
        AlgodApiError::GetPendingTransactions { error: err }
    }
}

impl From<pending_transaction_information::PendingTransactionInformationError> for AlgodApiError {
    fn from(err: pending_transaction_information::PendingTransactionInformationError) -> Self {
        AlgodApiError::PendingTransactionInformation { error: err }
    }
}

impl From<get_ledger_state_delta::GetLedgerStateDeltaError> for AlgodApiError {
    fn from(err: get_ledger_state_delta::GetLedgerStateDeltaError) -> Self {
        AlgodApiError::GetLedgerStateDelta { error: err }
    }
}

impl From<get_transaction_group_ledger_state_deltas_for_round::GetTransactionGroupLedgerStateDeltasForRoundError> for AlgodApiError {
    fn from(err: get_transaction_group_ledger_state_deltas_for_round::GetTransactionGroupLedgerStateDeltasForRoundError) -> Self {
        AlgodApiError::GetTransactionGroupLedgerStateDeltasForRound { error: err }
    }
}

impl From<get_ledger_state_delta_for_transaction_group::GetLedgerStateDeltaForTransactionGroupError>
    for AlgodApiError
{
    fn from(
        err: get_ledger_state_delta_for_transaction_group::GetLedgerStateDeltaForTransactionGroupError,
    ) -> Self {
        AlgodApiError::GetLedgerStateDeltaForTransactionGroup { error: err }
    }
}

impl From<get_state_proof::GetStateProofError> for AlgodApiError {
    fn from(err: get_state_proof::GetStateProofError) -> Self {
        AlgodApiError::GetStateProof { error: err }
    }
}

impl From<get_light_block_header_proof::GetLightBlockHeaderProofError> for AlgodApiError {
    fn from(err: get_light_block_header_proof::GetLightBlockHeaderProofError) -> Self {
        AlgodApiError::GetLightBlockHeaderProof { error: err }
    }
}

impl From<get_application_by_id::GetApplicationByIdError> for AlgodApiError {
    fn from(err: get_application_by_id::GetApplicationByIdError) -> Self {
        AlgodApiError::GetApplicationById { error: err }
    }
}

impl From<get_application_boxes::GetApplicationBoxesError> for AlgodApiError {
    fn from(err: get_application_boxes::GetApplicationBoxesError) -> Self {
        AlgodApiError::GetApplicationBoxes { error: err }
    }
}

impl From<get_application_box_by_name::GetApplicationBoxByNameError> for AlgodApiError {
    fn from(err: get_application_box_by_name::GetApplicationBoxByNameError) -> Self {
        AlgodApiError::GetApplicationBoxByName { error: err }
    }
}

impl From<get_asset_by_id::GetAssetByIdError> for AlgodApiError {
    fn from(err: get_asset_by_id::GetAssetByIdError) -> Self {
        AlgodApiError::GetAssetById { error: err }
    }
}

impl From<get_sync_round::GetSyncRoundError> for AlgodApiError {
    fn from(err: get_sync_round::GetSyncRoundError) -> Self {
        AlgodApiError::GetSyncRound { error: err }
    }
}

impl From<unset_sync_round::UnsetSyncRoundError> for AlgodApiError {
    fn from(err: unset_sync_round::UnsetSyncRoundError) -> Self {
        AlgodApiError::UnsetSyncRound { error: err }
    }
}

impl From<set_sync_round::SetSyncRoundError> for AlgodApiError {
    fn from(err: set_sync_round::SetSyncRoundError) -> Self {
        AlgodApiError::SetSyncRound { error: err }
    }
}

impl From<teal_compile::TealCompileError> for AlgodApiError {
    fn from(err: teal_compile::TealCompileError) -> Self {
        AlgodApiError::TealCompile { error: err }
    }
}

impl From<teal_disassemble::TealDisassembleError> for AlgodApiError {
    fn from(err: teal_disassemble::TealDisassembleError) -> Self {
        AlgodApiError::TealDisassemble { error: err }
    }
}

impl From<start_catchup::StartCatchupError> for AlgodApiError {
    fn from(err: start_catchup::StartCatchupError) -> Self {
        AlgodApiError::StartCatchup { error: err }
    }
}

impl From<abort_catchup::AbortCatchupError> for AlgodApiError {
    fn from(err: abort_catchup::AbortCatchupError) -> Self {
        AlgodApiError::AbortCatchup { error: err }
    }
}

impl From<teal_dryrun::TealDryrunError> for AlgodApiError {
    fn from(err: teal_dryrun::TealDryrunError) -> Self {
        AlgodApiError::TealDryrun { error: err }
    }
}

impl From<experimental_check::ExperimentalCheckError> for AlgodApiError {
    fn from(err: experimental_check::ExperimentalCheckError) -> Self {
        AlgodApiError::ExperimentalCheck { error: err }
    }
}

impl From<get_block_time_stamp_offset::GetBlockTimeStampOffsetError> for AlgodApiError {
    fn from(err: get_block_time_stamp_offset::GetBlockTimeStampOffsetError) -> Self {
        AlgodApiError::GetBlockTimeStampOffset { error: err }
    }
}

impl From<set_block_time_stamp_offset::SetBlockTimeStampOffsetError> for AlgodApiError {
    fn from(err: set_block_time_stamp_offset::SetBlockTimeStampOffsetError) -> Self {
        AlgodApiError::SetBlockTimeStampOffset { error: err }
    }
}

/// The main error type for all algod client operations
#[derive(Debug, Snafu)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum Error {
    #[snafu(display("HTTP error: {source}"))]
    Http {
        source: algokit_http_client::HttpError,
    },
    #[snafu(display("Serialization error: {message}"))]
    Serde { message: String },
    #[snafu(display("API error: {source}"))]
    Api { source: AlgodApiError },
}

#[derive(Debug, PartialEq, Eq)]
pub enum ContentType {
    Json,
    MsgPack,
    Text,
    Unsupported(String),
}

impl From<&str> for ContentType {
    fn from(content_type: &str) -> Self {
        if content_type.contains("application/json") {
            ContentType::Json
        } else if content_type.contains("application/msgpack") {
            ContentType::MsgPack
        } else if content_type.contains("text/plain") {
            ContentType::Text
        } else {
            ContentType::Unsupported(content_type.to_string())
        }
    }
}

pub fn urlencode<T: AsRef<str>>(s: T) -> String {
    ::url::form_urlencoded::byte_serialize(s.as_ref().as_bytes()).collect()
}

// Re-export the consolidated client
pub use client::AlgodClient;

// Re-export parameter enums
pub use parameter_enums::*;

// Re-export all endpoint functions
pub use abort_catchup::{AbortCatchupError, abort_catchup};
pub use account_application_information::{
    AccountApplicationInformationError, account_application_information,
};
pub use account_asset_information::{AccountAssetInformationError, account_asset_information};
pub use account_assets_information::{AccountAssetsInformationError, account_assets_information};
pub use account_information::{AccountInformationError, account_information};
pub use add_participation_key::{AddParticipationKeyError, add_participation_key};
pub use append_keys::{AppendKeysError, append_keys};
pub use delete_participation_key_by_id::{
    DeleteParticipationKeyByIdError, delete_participation_key_by_id,
};
pub use experimental_check::{ExperimentalCheckError, experimental_check};
pub use generate_participation_keys::{
    GenerateParticipationKeysError, generate_participation_keys,
};
pub use get_application_box_by_name::{GetApplicationBoxByNameError, get_application_box_by_name};
pub use get_application_boxes::{GetApplicationBoxesError, get_application_boxes};
pub use get_application_by_id::{GetApplicationByIdError, get_application_by_id};
pub use get_asset_by_id::{GetAssetByIdError, get_asset_by_id};
pub use get_block::{GetBlockError, get_block};
pub use get_block_hash::{GetBlockHashError, get_block_hash};
pub use get_block_logs::{GetBlockLogsError, get_block_logs};
pub use get_block_time_stamp_offset::{GetBlockTimeStampOffsetError, get_block_time_stamp_offset};
pub use get_block_txids::{GetBlockTxidsError, get_block_txids};
pub use get_config::{GetConfigError, get_config};
pub use get_debug_settings_prof::{GetDebugSettingsProfError, get_debug_settings_prof};
pub use get_genesis::{GetGenesisError, get_genesis};
pub use get_ledger_state_delta::{GetLedgerStateDeltaError, get_ledger_state_delta};
pub use get_ledger_state_delta_for_transaction_group::{
    GetLedgerStateDeltaForTransactionGroupError, get_ledger_state_delta_for_transaction_group,
};
pub use get_light_block_header_proof::{
    GetLightBlockHeaderProofError, get_light_block_header_proof,
};
pub use get_participation_key_by_id::{GetParticipationKeyByIdError, get_participation_key_by_id};
pub use get_participation_keys::{GetParticipationKeysError, get_participation_keys};
pub use get_pending_transactions::{GetPendingTransactionsError, get_pending_transactions};
pub use get_pending_transactions_by_address::{
    GetPendingTransactionsByAddressError, get_pending_transactions_by_address,
};
pub use get_ready::{GetReadyError, get_ready};
pub use get_state_proof::{GetStateProofError, get_state_proof};
pub use get_status::{GetStatusError, get_status};
pub use get_supply::{GetSupplyError, get_supply};
pub use get_sync_round::{GetSyncRoundError, get_sync_round};
pub use get_transaction_group_ledger_state_deltas_for_round::{
    GetTransactionGroupLedgerStateDeltasForRoundError,
    get_transaction_group_ledger_state_deltas_for_round,
};
pub use get_transaction_proof::{GetTransactionProofError, get_transaction_proof};
pub use get_version::{GetVersionError, get_version};
pub use health_check::{HealthCheckError, health_check};
pub use metrics::{MetricsError, metrics};
pub use pending_transaction_information::{
    PendingTransactionInformationError, pending_transaction_information,
};
pub use put_debug_settings_prof::{PutDebugSettingsProfError, put_debug_settings_prof};
pub use raw_transaction::{RawTransactionError, raw_transaction};
pub use raw_transaction_async::{RawTransactionAsyncError, raw_transaction_async};
pub use set_block_time_stamp_offset::{SetBlockTimeStampOffsetError, set_block_time_stamp_offset};
pub use set_sync_round::{SetSyncRoundError, set_sync_round};
pub use shutdown_node::{ShutdownNodeError, shutdown_node};
pub use simulate_transaction::{SimulateTransactionError, simulate_transaction};
pub use start_catchup::{StartCatchupError, start_catchup};
pub use swagger_json::{SwaggerJsonError, swagger_json};
pub use teal_compile::{TealCompileError, teal_compile};
pub use teal_disassemble::{TealDisassembleError, teal_disassemble};
pub use teal_dryrun::{TealDryrunError, teal_dryrun};
pub use transaction_params::{TransactionParamsError, transaction_params};
pub use unset_sync_round::{UnsetSyncRoundError, unset_sync_round};
pub use wait_for_block::{WaitForBlockError, wait_for_block};
