/*
 * Parameter Enums for Algod REST API.
 *
 * Auto-generated enums for parameters with constrained string values.
 *
 * Generated by: Rust OpenAPI Generator
 */

use serde::{Deserialize, Serialize};
use std::fmt;
use std::str::FromStr;

/// When set to `all` will exclude asset holdings, application local state, created asset parameters, any created application parameters. Defaults to `none`.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum Exclude {
    /// all
    All,
    /// none
    None,
}

impl fmt::Display for Exclude {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = match self {
            Exclude::All => "all",
            Exclude::None => "none",
        };
        write!(f, "{}", value)
    }
}

impl FromStr for Exclude {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "all" => Ok(Exclude::All),
            "none" => Ok(Exclude::None),
            _ => Err(format!("Invalid Exclude: {}", s)),
        }
    }
}

/// Configures whether the response object is JSON or MessagePack encoded. If not provided, defaults to JSON.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum Format {
    /// json
    Json,
    /// msgpack
    Msgpack,
}

impl fmt::Display for Format {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = match self {
            Format::Json => "json",
            Format::Msgpack => "msgpack",
        };
        write!(f, "{}", value)
    }
}

impl FromStr for Format {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "json" => Ok(Format::Json),
            "msgpack" => Ok(Format::Msgpack),
            _ => Err(format!("Invalid Format: {}", s)),
        }
    }
}

/// The type of hash function used to create the proof, must be one of:
///   * sha512_256
///   * sha256
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize)]
#[serde(rename_all = "lowercase")]
pub enum Hashtype {
    /// sha512_256
    Sha512256,
    /// sha256
    Sha256,
}

impl fmt::Display for Hashtype {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = match self {
            Hashtype::Sha512256 => "sha512_256",
            Hashtype::Sha256 => "sha256",
        };
        write!(f, "{}", value)
    }
}

impl FromStr for Hashtype {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "sha512_256" => Ok(Hashtype::Sha512256),
            "sha256" => Ok(Hashtype::Sha256),
            _ => Err(format!("Invalid Hashtype: {}", s)),
        }
    }
}
