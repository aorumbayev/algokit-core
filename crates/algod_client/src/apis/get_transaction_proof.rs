/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::parameter_enums::*;
use super::{AlgodApiError, ContentType, Error};

// Import all custom types used by this endpoint
use crate::models::{ErrorResponse, TransactionProof};

// Import request body type if needed

/// struct for typed errors of method [`get_transaction_proof`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum GetTransactionProofError {
    Status400(ErrorResponse),
    Status401(ErrorResponse),
    Status404(ErrorResponse),
    Status500(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(crate::models::UnknownJsonValue),
}

/// Get a proof for a transaction in a block.
pub async fn get_transaction_proof(
    http_client: &dyn HttpClient,
    round: u64,
    txid: &str,
    hashtype: Option<Hashtype>,
    format: Option<Format>,
) -> Result<TransactionProof, Error> {
    let p_round = round;
    let p_txid = txid;
    let p_hashtype = hashtype;
    let p_format = format;

    let path = format!(
        "/v2/blocks/{round}/transactions/{txid}/proof",
        round = p_round,
        txid = crate::apis::urlencode(p_txid)
    );

    let mut query_params: HashMap<String, String> = HashMap::new();
    if let Some(value) = p_hashtype {
        query_params.insert("hashtype".to_string(), value.to_string());
    }
    if let Some(value) = p_format {
        query_params.insert("format".to_string(), value.to_string());
    }

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert("Accept".to_string(), "application/json".to_string());

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Get,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => serde_json::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::MsgPack => Err(Error::Serde {
            message: "MsgPack not supported".to_string(),
        }),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde {
                message: e.to_string(),
            })?;
            Err(Error::Serde {
                message: format!("Unexpected text response: {}", text),
            })
        }
        ContentType::Unsupported(ct) => Err(Error::Serde {
            message: format!("Unsupported content type: {}", ct),
        }),
    }
}
