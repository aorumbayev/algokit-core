/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::{AlgodApiError, ContentType, Error};

// Import all custom types used by this endpoint
use crate::models::{ErrorResponse, GetBlockTimeStampOffset};

// Import request body type if needed

/// struct for typed errors of method [`get_block_time_stamp_offset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetBlockTimeStampOffsetError {
    Status400(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// Gets the current timestamp offset.
pub async fn get_block_time_stamp_offset(
    http_client: &dyn HttpClient,
) -> Result<GetBlockTimeStampOffset, Error> {
    let path = "/v2/devmode/blocks/offset".to_string();

    let query_params: HashMap<String, String> = HashMap::new();

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert("Content-Type".to_string(), "application/json".to_string());
    headers.insert("Accept".to_string(), "application/json".to_string());

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Get,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(Error::Http)?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => {
            serde_json::from_slice(&response.body).map_err(|e| Error::Serde(e.to_string()))
        }
        ContentType::MsgPack => Err(Error::Serde("MsgPack not supported".to_string())),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde(e.to_string()))?;
            Err(Error::Serde(format!("Unexpected text response: {}", text)))
        }
        ContentType::Unsupported(ct) => {
            Err(Error::Serde(format!("Unsupported content type: {}", ct)))
        }
    }
}
