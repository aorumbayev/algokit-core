/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::{AlgodApiError, ContentType, Error};
use algokit_transact::AlgorandMsgpack;

// Import all custom types used by this endpoint
use crate::models::{AddParticipationKey, ErrorResponse};

// Import request body type if needed

/// struct for typed errors of method [`add_participation_key`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddParticipationKeyError {
    Status400(ErrorResponse),
    Status401(ErrorResponse),
    Status404(ErrorResponse),
    Status500(ErrorResponse),
    Status503(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// Add a participation key to the node
pub async fn add_participation_key(
    http_client: &dyn HttpClient,
    request: Vec<u8>,
) -> Result<AddParticipationKey, Error> {
    let p_request = request;

    let path = "/v2/participation".to_string();

    let query_params: HashMap<String, String> = HashMap::new();

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert(
        "Content-Type".to_string(),
        "application/msgpack".to_string(),
    );
    headers.insert("Accept".to_string(), "application/msgpack".to_string());

    let body = Some(p_request);

    let response = http_client
        .request(
            HttpMethod::Post,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => serde_json::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::MsgPack => rmp_serde::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde {
                message: e.to_string(),
            })?;
            Err(Error::Serde {
                message: format!("Unexpected text response: {}", text),
            })
        }
        ContentType::Unsupported(ct) => Err(Error::Serde {
            message: format!("Unsupported content type: {}", ct),
        }),
    }
}
