/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::{AlgodApiError, ContentType, Error};
use algokit_transact::AlgorandMsgpack;

// Import all custom types used by this endpoint
use crate::models::ErrorResponse;

// Import request body type if needed

/// struct for typed errors of method [`raw_transaction_async`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum RawTransactionAsyncError {
    Status400(ErrorResponse),
    Status401(ErrorResponse),
    Status404(),
    Status500(ErrorResponse),
    Status503(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(crate::models::UnknownJsonValue),
}

/// Fast track for broadcasting a raw transaction or transaction group to the network through the tx handler without performing most of the checks and reporting detailed errors. Should be only used for development and performance testing.
pub async fn raw_transaction_async(
    http_client: &dyn HttpClient,
    request: Vec<u8>,
) -> Result<(), Error> {
    let p_request = request;

    let path = "/v2/transactions/async".to_string();

    let query_params: HashMap<String, String> = HashMap::new();

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert(
        "Content-Type".to_string(),
        "application/msgpack".to_string(),
    );
    headers.insert("Accept".to_string(), "application/msgpack".to_string());

    let body = Some(p_request);

    let response = http_client
        .request(
            HttpMethod::Post,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let _ = response;
    Ok(())
}
