/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::{AlgodApiError, ContentType, Error};

// Import all custom types used by this endpoint
use crate::models::ErrorResponse;

// Import request body type if needed

/// struct for typed errors of method [`set_block_time_stamp_offset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum SetBlockTimeStampOffsetError {
    Status400(ErrorResponse),
    Status401(ErrorResponse),
    Status500(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(crate::models::UnknownJsonValue),
}

/// Sets the timestamp offset (seconds) for blocks in dev mode. Providing an offset of 0 will unset this value and try to use the real clock for the timestamp.
pub async fn set_block_time_stamp_offset(
    http_client: &dyn HttpClient,
    offset: u64,
) -> Result<(), Error> {
    let p_offset = offset;

    let path = format!("/v2/devmode/blocks/offset/{offset}", offset = p_offset);

    let query_params: HashMap<String, String> = HashMap::new();

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert("Accept".to_string(), "application/json".to_string());

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Post,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let _ = response;
    Ok(())
}
