/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::parameter_enums::*;
use super::{AlgodApiError, ContentType, Error};
use algokit_transact::AlgorandMsgpack;

// Import all custom types used by this endpoint
use crate::models::{ErrorResponse, PendingTransactionResponse};

// Import request body type if needed

/// struct for typed errors of method [`pending_transaction_information`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum PendingTransactionInformationError {
    Status400(ErrorResponse),
    Status401(ErrorResponse),
    Status404(ErrorResponse),
    Statusdefault(),
    DefaultResponse(),
    UnknownValue(crate::models::UnknownJsonValue),
}

/// Given a transaction ID of a recently submitted transaction, it returns information about it.  There are several cases when this might succeed:
///   - transaction committed (committed round > 0)
///   - transaction still in the pool (committed round = 0, pool error = "")
///   - transaction removed from pool due to error (committed round = 0, pool error != "")
///
/// Or the transaction may have happened sufficiently long ago that the node no longer remembers it, and this will return an error.
pub async fn pending_transaction_information(
    http_client: &dyn HttpClient,
    txid: &str,
    format: Option<Format>,
) -> Result<PendingTransactionResponse, Error> {
    let p_txid = txid;
    let p_format = format;

    let path = format!(
        "/v2/transactions/pending/{txid}",
        txid = crate::apis::urlencode(p_txid)
    );

    let mut query_params: HashMap<String, String> = HashMap::new();
    if let Some(value) = p_format {
        query_params.insert("format".to_string(), value.to_string());
    }

    let use_msgpack = p_format.map(|f| f != Format::Json).unwrap_or(true);

    let mut headers: HashMap<String, String> = HashMap::new();
    if use_msgpack {
        headers.insert(
            "Content-Type".to_string(),
            "application/msgpack".to_string(),
        );
        headers.insert("Accept".to_string(), "application/msgpack".to_string());
    } else {
        headers.insert("Content-Type".to_string(), "application/json".to_string());
        headers.insert("Accept".to_string(), "application/json".to_string());
    }

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Get,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => serde_json::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::MsgPack => rmp_serde::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde {
                message: e.to_string(),
            })?;
            Err(Error::Serde {
                message: format!("Unexpected text response: {}", text),
            })
        }
        ContentType::Unsupported(ct) => Err(Error::Serde {
            message: format!("Unsupported content type: {}", ct),
        }),
    }
}
