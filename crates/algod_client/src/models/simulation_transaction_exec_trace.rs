/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::SimulationOpcodeTraceUnit;

/// The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimulationTransactionExecTrace {
    /// Program trace that contains a trace of opcode effects in an approval program.
    #[serde(
        rename = "approval-program-trace",
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_program_trace: Option<Vec<SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the approval program executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(
        rename = "approval-program-hash",
        skip_serializing_if = "Option::is_none"
    )]
    pub approval_program_hash: Option<Vec<u8>>,
    /// Program trace that contains a trace of opcode effects in a clear state program.
    #[serde(
        rename = "clear-state-program-trace",
        skip_serializing_if = "Option::is_none"
    )]
    pub clear_state_program_trace: Option<Vec<SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the clear state program executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(
        rename = "clear-state-program-hash",
        skip_serializing_if = "Option::is_none"
    )]
    pub clear_state_program_hash: Option<Vec<u8>>,
    /// If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.
    #[serde(
        rename = "clear-state-rollback",
        skip_serializing_if = "Option::is_none"
    )]
    pub clear_state_rollback: Option<bool>,
    /// The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.
    #[serde(
        rename = "clear-state-rollback-error",
        skip_serializing_if = "Option::is_none"
    )]
    pub clear_state_rollback_error: Option<String>,
    /// Program trace that contains a trace of opcode effects in a logic sig.
    #[serde(rename = "logic-sig-trace", skip_serializing_if = "Option::is_none")]
    pub logic_sig_trace: Option<Vec<SimulationOpcodeTraceUnit>>,
    /// SHA512_256 hash digest of the logic sig executed in transaction.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "logic-sig-hash", skip_serializing_if = "Option::is_none")]
    pub logic_sig_hash: Option<Vec<u8>>,
    /// An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.
    #[serde(rename = "inner-trace", skip_serializing_if = "Option::is_none")]
    pub inner_trace: Option<Vec<SimulationTransactionExecTrace>>,
}

impl AlgorandMsgpack for SimulationTransactionExecTrace {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulationTransactionExecTrace {
    /// Default constructor for SimulationTransactionExecTrace
    pub fn new() -> SimulationTransactionExecTrace {
        SimulationTransactionExecTrace::default()
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
