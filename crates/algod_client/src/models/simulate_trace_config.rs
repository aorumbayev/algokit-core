/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

/// An object that configures simulation execution trace.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateTraceConfig {
    /// A boolean option for opting in execution trace features simulation endpoint.
    #[serde(rename = "enable", skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// A boolean option enabling returning stack changes together with execution trace during simulation.
    #[serde(rename = "stack-change", skip_serializing_if = "Option::is_none")]
    pub stack_change: Option<bool>,
    /// A boolean option enabling returning scratch slot changes together with execution trace during simulation.
    #[serde(rename = "scratch-change", skip_serializing_if = "Option::is_none")]
    pub scratch_change: Option<bool>,
    /// A boolean option enabling returning application state changes (global, local, and box changes) with the execution trace during simulation.
    #[serde(rename = "state-change", skip_serializing_if = "Option::is_none")]
    pub state_change: Option<bool>,
}

impl AlgorandMsgpack for SimulateTraceConfig {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulateTraceConfig {
    /// Default constructor for SimulateTraceConfig
    pub fn new() -> SimulateTraceConfig {
        SimulateTraceConfig::default()
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
