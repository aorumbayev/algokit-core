/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct BuildVersion {
    #[serde(rename = "branch")]
    pub branch: String,
    #[serde(rename = "build_number")]
    pub build_number: u64,
    #[serde(rename = "channel")]
    pub channel: String,
    #[serde(rename = "commit_hash")]
    pub commit_hash: String,
    #[serde(rename = "major")]
    pub major: u64,
    #[serde(rename = "minor")]
    pub minor: u64,
}

impl BuildVersion {
    /// Constructor for BuildVersion
    pub fn new(
        branch: String,
        build_number: u64,
        channel: String,
        commit_hash: String,
        major: u64,
        minor: u64,
    ) -> BuildVersion {
        BuildVersion {
            branch,
            build_number,
            channel,
            commit_hash,
            major,
            minor,
        }
    }
}
