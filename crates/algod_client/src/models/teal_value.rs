/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

/// Represents a TEAL value.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TealValue {
    /// \[tt\] value type. Value `1` refers to **bytes**, value `2` refers to **uint**
    #[serde(rename = "type")]
    pub r#type: u64,
    /// \[tb\] bytes value.
    #[serde(rename = "bytes")]
    pub bytes: String,
    /// \[ui\] uint value.
    #[serde(rename = "uint")]
    pub uint: u64,
}

impl AlgorandMsgpack for TealValue {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl TealValue {
    /// Constructor for TealValue
    pub fn new(r#type: u64, bytes: String, uint: u64) -> TealValue {
        TealValue {
            r#type,
            bytes,
            uint,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
