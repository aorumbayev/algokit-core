/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::AccountStateDelta;
use crate::models::StateDelta;

/// Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
#[serde_as]
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PendingTransactionResponse {
    /// The asset index if the transaction was found and it created an asset.
    #[serde(rename = "asset-index", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<u64>,
    /// The application index if the transaction was found and it created an application.
    #[serde(rename = "application-index", skip_serializing_if = "Option::is_none")]
    pub app_id: Option<u64>,
    /// Rewards in microalgos applied to the close remainder to account.
    #[serde(rename = "close-rewards", skip_serializing_if = "Option::is_none")]
    pub close_rewards: Option<u64>,
    /// Closing amount for the transaction.
    #[serde(rename = "closing-amount", skip_serializing_if = "Option::is_none")]
    pub closing_amount: Option<u64>,
    /// The number of the asset's unit that were transferred to the close-to address.
    #[serde(
        rename = "asset-closing-amount",
        skip_serializing_if = "Option::is_none"
    )]
    pub asset_closing_amount: Option<u64>,
    /// The round where this transaction was confirmed, if present.
    #[serde(rename = "confirmed-round", skip_serializing_if = "Option::is_none")]
    pub confirmed_round: Option<u64>,
    /// Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
    #[serde(rename = "pool-error")]
    pub pool_error: String,
    /// Rewards in microalgos applied to the receiver account.
    #[serde(rename = "receiver-rewards", skip_serializing_if = "Option::is_none")]
    pub receiver_rewards: Option<u64>,
    /// Rewards in microalgos applied to the sender account.
    #[serde(rename = "sender-rewards", skip_serializing_if = "Option::is_none")]
    pub sender_rewards: Option<u64>,
    /// Local state key/value changes for the application being executed by this transaction.
    #[serde(rename = "local-state-delta", skip_serializing_if = "Option::is_none")]
    pub local_state_delta: Option<Vec<AccountStateDelta>>,
    #[serde(rename = "global-state-delta", skip_serializing_if = "Option::is_none")]
    pub global_state_delta: Option<StateDelta>,
    /// Logs for the application being executed by this transaction.
    #[serde_as(as = "Option<Vec<Bytes>>")]
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<Vec<u8>>>,
    /// Inner transactions produced by application execution.
    #[serde(rename = "inner-txns", skip_serializing_if = "Option::is_none")]
    pub inner_txns: Option<Vec<PendingTransactionResponse>>,
    /// The raw signed transaction.
    #[serde(rename = "txn")]
    pub txn: AlgokitSignedTransaction,
}

impl Default for PendingTransactionResponse {
    fn default() -> Self {
        Self {
            asset_id: None,
            app_id: None,
            close_rewards: None,
            closing_amount: None,
            asset_closing_amount: None,
            confirmed_round: None,
            pool_error: "".to_string(),
            receiver_rewards: None,
            sender_rewards: None,
            local_state_delta: None,
            global_state_delta: None,
            logs: None,
            inner_txns: None,
            txn: AlgokitSignedTransaction {
                transaction: algokit_transact::Transaction::Payment(
                    algokit_transact::PaymentTransactionFields {
                        header: algokit_transact::TransactionHeader {
                            sender: Default::default(),
                            fee: None,
                            first_valid: 0,
                            last_valid: 0,
                            genesis_hash: None,
                            genesis_id: None,
                            note: None,
                            rekey_to: None,
                            lease: None,
                            group: None,
                        },
                        receiver: Default::default(),
                        amount: 0,
                        close_remainder_to: None,
                    },
                ),
                signature: None,
                auth_address: None,
                multisignature: None,
            },
        }
    }
}

impl AlgorandMsgpack for PendingTransactionResponse {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl PendingTransactionResponse {
    /// Constructor for PendingTransactionResponse
    pub fn new(pool_error: String, txn: AlgokitSignedTransaction) -> PendingTransactionResponse {
        PendingTransactionResponse {
            pool_error,
            txn,
            asset_id: None,
            app_id: None,
            close_rewards: None,
            closing_amount: None,
            asset_closing_amount: None,
            confirmed_round: None,
            receiver_rewards: None,
            sender_rewards: None,
            local_state_delta: None,
            global_state_delta: None,
            logs: None,
            inner_txns: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
