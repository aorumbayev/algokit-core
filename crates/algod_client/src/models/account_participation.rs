/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// AccountParticipation describes the parameters used by this account in consensus protocol.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AccountParticipation {
    /// \[sel\] Selection public key (if any) currently registered for this round.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "selection-participation-key")]
    pub selection_participation_key: Vec<u8>,
    /// \[voteFst\] First round for which this participation is valid.
    #[serde(rename = "vote-first-valid")]
    pub vote_first_valid: u64,
    /// \[voteKD\] Number of subkeys in each batch of participation keys.
    #[serde(rename = "vote-key-dilution")]
    pub vote_key_dilution: u64,
    /// \[voteLst\] Last round for which this participation is valid.
    #[serde(rename = "vote-last-valid")]
    pub vote_last_valid: u64,
    /// \[vote\] root participation public key (if any) currently registered for this round.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "vote-participation-key")]
    pub vote_participation_key: Vec<u8>,
    /// \[stprf\] Root of the state proof key (if any)
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "state-proof-key", skip_serializing_if = "Option::is_none")]
    pub state_proof_key: Option<Vec<u8>>,
}

impl AlgorandMsgpack for AccountParticipation {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl AccountParticipation {
    /// Constructor for AccountParticipation
    pub fn new(
        selection_participation_key: Vec<u8>,
        vote_first_valid: u64,
        vote_key_dilution: u64,
        vote_last_valid: u64,
        vote_participation_key: Vec<u8>,
    ) -> AccountParticipation {
        AccountParticipation {
            selection_participation_key,
            vote_first_valid,
            vote_key_dilution,
            vote_last_valid,
            vote_participation_key,
            state_proof_key: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
