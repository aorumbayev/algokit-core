/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::AssetHolding;
use crate::models::AssetParams;

/// AccountAssetResponse describes the account's asset holding and asset parameters (if either exist) for a specific asset ID. Asset parameters will only be returned if the provided address is the asset's creator.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AccountAssetInformation {
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    pub round: u64,
    #[serde(rename = "asset-holding", skip_serializing_if = "Option::is_none")]
    pub asset_holding: Option<AssetHolding>,
    #[serde(rename = "created-asset", skip_serializing_if = "Option::is_none")]
    pub created_asset: Option<AssetParams>,
}

impl AlgorandMsgpack for AccountAssetInformation {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl AccountAssetInformation {
    /// Constructor for AccountAssetInformation
    pub fn new(round: u64) -> AccountAssetInformation {
        AccountAssetInformation {
            round,
            asset_holding: None,
            created_asset: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
