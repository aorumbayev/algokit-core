/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::Account;
use crate::models::Application;
use crate::models::DryrunSource;

/// Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct DryrunRequest {
    #[serde(rename = "txns")]
    pub txns: Vec<AlgokitSignedTransaction>,
    #[serde(rename = "accounts")]
    pub accounts: Vec<Account>,
    #[serde(rename = "apps")]
    pub apps: Vec<Application>,
    /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
    #[serde(rename = "protocol-version")]
    pub protocol_version: String,
    /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
    #[serde(rename = "round")]
    pub round: u64,
    /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
    #[serde(rename = "latest-timestamp")]
    pub latest_timestamp: u64,
    #[serde(rename = "sources")]
    pub sources: Vec<DryrunSource>,
}

impl AlgorandMsgpack for DryrunRequest {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl DryrunRequest {
    /// Constructor for DryrunRequest
    pub fn new(
        txns: Vec<AlgokitSignedTransaction>,
        accounts: Vec<Account>,
        apps: Vec<Application>,
        protocol_version: String,
        round: u64,
        latest_timestamp: u64,
        sources: Vec<DryrunSource>,
    ) -> DryrunRequest {
        DryrunRequest {
            txns,
            accounts,
            apps,
            protocol_version,
            round,
            latest_timestamp,
            sources,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
