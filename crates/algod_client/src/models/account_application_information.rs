/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::ApplicationLocalState;
use crate::models::ApplicationParams;

/// AccountApplicationResponse describes the account's application local state and global state (AppLocalState and AppParams, if either exists) for a specific application ID. Global state will only be returned if the provided address is the application's creator.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AccountApplicationInformation {
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    pub round: u64,
    #[serde(rename = "app-local-state", skip_serializing_if = "Option::is_none")]
    pub app_local_state: Option<ApplicationLocalState>,
    #[serde(rename = "created-app", skip_serializing_if = "Option::is_none")]
    pub created_app: Option<ApplicationParams>,
}

impl AlgorandMsgpack for AccountApplicationInformation {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl AccountApplicationInformation {
    /// Constructor for AccountApplicationInformation
    pub fn new(round: u64) -> AccountApplicationInformation {
        AccountApplicationInformation {
            round,
            app_local_state: None,
            created_app: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
