/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::AvmValue;

/// Represents an AVM key-value pair in an application store.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AvmKeyValue {
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "key")]
    pub key: Vec<u8>,
    #[serde(rename = "value")]
    pub value: AvmValue,
}

impl AlgorandMsgpack for AvmKeyValue {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl AvmKeyValue {
    /// Constructor for AvmKeyValue
    pub fn new(key: Vec<u8>, value: AvmValue) -> AvmKeyValue {
        AvmKeyValue { key, value }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
