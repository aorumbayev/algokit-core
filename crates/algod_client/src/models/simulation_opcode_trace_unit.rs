/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

use crate::models::ApplicationStateOperation;
use crate::models::AvmValue;
use crate::models::ScratchChange;

/// The set of trace information and effect from evaluating a single opcode.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimulationOpcodeTraceUnit {
    /// The program counter of the current opcode being evaluated.
    #[serde(rename = "pc")]
    pub pc: u64,
    /// The writes into scratch slots.
    #[serde(rename = "scratch-changes", skip_serializing_if = "Option::is_none")]
    pub scratch_changes: Option<Vec<ScratchChange>>,
    /// The operations against the current application's states.
    #[serde(rename = "state-changes", skip_serializing_if = "Option::is_none")]
    pub state_changes: Option<Vec<ApplicationStateOperation>>,
    /// The indexes of the traces for inner transactions spawned by this opcode, if any.
    #[serde(rename = "spawned-inners", skip_serializing_if = "Option::is_none")]
    pub spawned_inners: Option<Vec<u64>>,
    /// The number of deleted stack values by this opcode.
    #[serde(rename = "stack-pop-count", skip_serializing_if = "Option::is_none")]
    pub stack_pop_count: Option<u64>,
    /// The values added by this opcode to the stack.
    #[serde(rename = "stack-additions", skip_serializing_if = "Option::is_none")]
    pub stack_additions: Option<Vec<AvmValue>>,
}

impl AlgorandMsgpack for SimulationOpcodeTraceUnit {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulationOpcodeTraceUnit {
    /// Constructor for SimulationOpcodeTraceUnit
    pub fn new(pc: u64) -> SimulationOpcodeTraceUnit {
        SimulationOpcodeTraceUnit {
            pc,
            scratch_changes: None,
            state_changes: None,
            spawned_inners: None,
            stack_pop_count: None,
            stack_additions: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
