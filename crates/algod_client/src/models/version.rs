/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::BuildVersion;

/// algod version information.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct Version {
    #[serde(rename = "build")]
    pub build: BuildVersion,
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "genesis_hash_b64")]
    pub genesis_hash_b64: Vec<u8>,
    #[serde(rename = "genesis_id")]
    pub genesis_id: String,
    #[serde(rename = "versions")]
    pub versions: Vec<String>,
}

impl Version {
    /// Constructor for Version
    pub fn new(
        build: BuildVersion,
        genesis_hash_b64: Vec<u8>,
        genesis_id: String,
        versions: Vec<String>,
    ) -> Version {
        Version {
            build,
            genesis_hash_b64,
            genesis_id,
            versions,
        }
    }
}
