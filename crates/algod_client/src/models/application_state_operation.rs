/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::AvmValue;

/// An operation against an application's global/local/box state.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationStateOperation {
    /// Operation type. Value `w` is **write**, `d` is **delete**.
    #[serde(rename = "operation")]
    pub operation: String,
    /// Type of application state. Value `g` is **global state**, `l` is **local state**, `b` is **boxes**.
    #[serde(rename = "app-state-type")]
    pub app_state_type: String,
    /// The key (name) of the global/local/box state.
    #[serde_as(as = "Bytes")]
    #[serde(rename = "key")]
    pub key: Vec<u8>,
    #[serde(rename = "new-value", skip_serializing_if = "Option::is_none")]
    pub new_value: Option<AvmValue>,
    /// For local state changes, the address of the account associated with the local state.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
}

impl AlgorandMsgpack for ApplicationStateOperation {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl ApplicationStateOperation {
    /// Constructor for ApplicationStateOperation
    pub fn new(
        operation: String,
        app_state_type: String,
        key: Vec<u8>,
    ) -> ApplicationStateOperation {
        ApplicationStateOperation {
            operation,
            app_state_type,
            key,
            new_value: None,
            account: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
