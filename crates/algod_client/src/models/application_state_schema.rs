/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

/// Specifies maximums on the number of each type that may be stored.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationStateSchema {
    /// \[nui\] num of uints.
    #[serde(rename = "num-uint")]
    pub num_uint: u32,
    /// \[nbs\] num of byte slices.
    #[serde(rename = "num-byte-slice")]
    pub num_byte_slice: u32,
}

impl AlgorandMsgpack for ApplicationStateSchema {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl ApplicationStateSchema {
    /// Constructor for ApplicationStateSchema
    pub fn new(num_uint: u32, num_byte_slice: u32) -> ApplicationStateSchema {
        ApplicationStateSchema {
            num_uint,
            num_byte_slice,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
