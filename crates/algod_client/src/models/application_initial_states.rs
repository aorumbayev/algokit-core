/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::ApplicationKvStorage;

/// An application's initial global/local/box states that were accessed during simulation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationInitialStates {
    /// Application index.
    #[serde(rename = "id")]
    pub id: u64,
    /// An application's initial local states tied to different accounts.
    #[serde(rename = "app-locals", skip_serializing_if = "Option::is_none")]
    pub app_locals: Option<Vec<ApplicationKvStorage>>,
    #[serde(rename = "app-globals", skip_serializing_if = "Option::is_none")]
    pub app_globals: Option<ApplicationKvStorage>,
    #[serde(rename = "app-boxes", skip_serializing_if = "Option::is_none")]
    pub app_boxes: Option<ApplicationKvStorage>,
}

impl AlgorandMsgpack for ApplicationInitialStates {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl ApplicationInitialStates {
    /// Constructor for ApplicationInitialStates
    pub fn new(id: u64) -> ApplicationInitialStates {
        ApplicationInitialStates {
            id,
            app_locals: None,
            app_globals: None,
            app_boxes: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
