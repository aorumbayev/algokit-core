/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::ApplicationStateSchema;
use crate::models::TealKeyValueStore;

/// Stores the global information associated with an application.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationParams {
    /// The address that created this application. This is the address where the parameters and global state for this application can be found.
    #[serde(rename = "creator")]
    pub creator: String,
    /// \[approv\] approval program.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "approval-program")]
    pub approval_program: Vec<u8>,
    /// \[clearp\] approval program.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "clear-state-program")]
    pub clear_state_program: Vec<u8>,
    /// \[epp\] the amount of extra program pages available to this app.
    #[serde(
        rename = "extra-program-pages",
        skip_serializing_if = "Option::is_none"
    )]
    pub extra_program_pages: Option<u32>,
    #[serde(rename = "local-state-schema", skip_serializing_if = "Option::is_none")]
    pub local_state_schema: Option<ApplicationStateSchema>,
    #[serde(
        rename = "global-state-schema",
        skip_serializing_if = "Option::is_none"
    )]
    pub global_state_schema: Option<ApplicationStateSchema>,
    #[serde(rename = "global-state", skip_serializing_if = "Option::is_none")]
    pub global_state: Option<TealKeyValueStore>,
    /// \[v\] the number of updates to the application programs
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<u64>,
}

impl AlgorandMsgpack for ApplicationParams {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl ApplicationParams {
    /// Constructor for ApplicationParams
    pub fn new(
        creator: String,
        approval_program: Vec<u8>,
        clear_state_program: Vec<u8>,
    ) -> ApplicationParams {
        ApplicationParams {
            creator,
            approval_program,
            clear_state_program,
            extra_program_pages: None,
            local_state_schema: None,
            global_state_schema: None,
            global_state: None,
            version: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
