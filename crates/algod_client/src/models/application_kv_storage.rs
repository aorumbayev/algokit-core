/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

use crate::models::AvmKeyValue;

/// An application's global/local/box state.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationKvStorage {
    /// Key-Value pairs representing application states.
    #[serde(rename = "kvs")]
    pub kvs: Vec<AvmKeyValue>,
    /// The address of the account associated with the local state.
    #[serde(rename = "account", skip_serializing_if = "Option::is_none")]
    pub account: Option<String>,
}

impl AlgorandMsgpack for ApplicationKvStorage {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl ApplicationKvStorage {
    /// Constructor for ApplicationKvStorage
    pub fn new(kvs: Vec<AvmKeyValue>) -> ApplicationKvStorage {
        ApplicationKvStorage { kvs, account: None }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
