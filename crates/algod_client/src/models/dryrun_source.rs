/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

/// DryrunSource is TEAL source text that gets uploaded, compiled, and inserted into transactions or application state.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DryrunSource {
    /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].
    #[serde(rename = "field-name")]
    pub field_name: String,
    #[serde(rename = "source")]
    pub source: String,
    #[serde(rename = "txn-index")]
    pub txn_index: u64,
    #[serde(rename = "app-index")]
    pub app_index: u64,
}

impl AlgorandMsgpack for DryrunSource {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl DryrunSource {
    /// Constructor for DryrunSource
    pub fn new(field_name: String, source: String, txn_index: u64, app_index: u64) -> DryrunSource {
        DryrunSource {
            field_name,
            source,
            txn_index,
            app_index,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
