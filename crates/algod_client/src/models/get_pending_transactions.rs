/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

/// PendingTransactions is an array of signed transactions exactly as they were submitted.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetPendingTransactions {
    /// An array of signed transaction objects.
    #[serde(rename = "top-transactions")]
    pub top_transactions: Vec<AlgokitSignedTransaction>,
    /// Total number of transactions in the pool.
    #[serde(rename = "total-transactions")]
    pub total_transactions: u64,
}

impl AlgorandMsgpack for GetPendingTransactions {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl GetPendingTransactions {
    /// Constructor for GetPendingTransactions
    pub fn new(
        top_transactions: Vec<AlgokitSignedTransaction>,
        total_transactions: u64,
    ) -> GetPendingTransactions {
        GetPendingTransactions {
            top_transactions,
            total_transactions,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
