/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::SimulateRequestTransactionGroup;
use crate::models::SimulateTraceConfig;

/// Request type for simulation endpoint.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateRequest {
    /// The transaction groups to simulate.
    #[serde(rename = "txn-groups")]
    pub txn_groups: Vec<SimulateRequestTransactionGroup>,
    /// If provided, specifies the round preceding the simulation. State changes through this round will be used to run this simulation. Usually only the 4 most recent rounds will be available (controlled by the node config value MaxAcctLookback). If not specified, defaults to the latest available round.
    #[serde(rename = "round", skip_serializing_if = "Option::is_none")]
    pub round: Option<u64>,
    /// Allows transactions without signatures to be simulated as if they had correct signatures.
    #[serde(
        rename = "allow-empty-signatures",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_empty_signatures: Option<bool>,
    /// Lifts limits on log opcode usage during simulation.
    #[serde(rename = "allow-more-logging", skip_serializing_if = "Option::is_none")]
    pub allow_more_logging: Option<bool>,
    /// Allows access to unnamed resources during simulation.
    #[serde(
        rename = "allow-unnamed-resources",
        skip_serializing_if = "Option::is_none"
    )]
    pub allow_unnamed_resources: Option<bool>,
    /// Applies extra opcode budget during simulation for each transaction group.
    #[serde(
        rename = "extra-opcode-budget",
        skip_serializing_if = "Option::is_none"
    )]
    pub extra_opcode_budget: Option<u64>,
    #[serde(rename = "exec-trace-config", skip_serializing_if = "Option::is_none")]
    pub exec_trace_config: Option<SimulateTraceConfig>,
    /// If true, signers for transactions that are missing signatures will be fixed during evaluation.
    #[serde(rename = "fix-signers", skip_serializing_if = "Option::is_none")]
    pub fix_signers: Option<bool>,
}

impl AlgorandMsgpack for SimulateRequest {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulateRequest {
    /// Constructor for SimulateRequest
    pub fn new(txn_groups: Vec<SimulateRequestTransactionGroup>) -> SimulateRequest {
        SimulateRequest {
            txn_groups,
            round: None,
            allow_empty_signatures: None,
            allow_more_logging: None,
            allow_unnamed_resources: None,
            extra_opcode_budget: None,
            exec_trace_config: None,
            fix_signers: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
