/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::serde_as;

/// Represents the message that the state proofs are attesting to.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateProofMessage {
    /// The vector commitment root on all light block headers within a state proof interval.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "BlockHeadersCommitment")]
    pub block_headers_commitment: Vec<u8>,
    /// The vector commitment root of the top N accounts to sign the next StateProof.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "VotersCommitment")]
    pub voters_commitment: Vec<u8>,
    /// An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.
    #[serde(rename = "LnProvenWeight")]
    pub ln_proven_weight: u64,
    /// The first round the message attests to.
    #[serde(rename = "FirstAttestedRound")]
    pub first_attested_round: u64,
    /// The last round the message attests to.
    #[serde(rename = "LastAttestedRound")]
    pub last_attested_round: u64,
}

impl StateProofMessage {
    /// Constructor for StateProofMessage
    pub fn new(
        block_headers_commitment: Vec<u8>,
        voters_commitment: Vec<u8>,
        ln_proven_weight: u64,
        first_attested_round: u64,
        last_attested_round: u64,
    ) -> StateProofMessage {
        StateProofMessage {
            block_headers_commitment,
            voters_commitment,
            ln_proven_weight,
            first_attested_round,
            last_attested_round,
        }
    }
}
