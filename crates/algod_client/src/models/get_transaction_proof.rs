/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::serde_as;

/// Proof of transaction in a block.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetTransactionProof {
    /// Proof of transaction membership.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "proof")]
    pub proof: Vec<u8>,
    /// Hash of SignedTxnInBlock for verifying proof.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "stibhash")]
    pub stibhash: Vec<u8>,
    /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
    #[serde(rename = "treedepth")]
    pub treedepth: u64,
    /// Index of the transaction in the block's payset.
    #[serde(rename = "idx")]
    pub idx: u64,
    /// The type of hash function used to create the proof, must be one of:
    ///   * sha512_256
    ///   * sha256
    #[serde(rename = "hashtype")]
    pub hashtype: String,
}

impl GetTransactionProof {
    /// Constructor for GetTransactionProof
    pub fn new(
        proof: Vec<u8>,
        stibhash: Vec<u8>,
        treedepth: u64,
        idx: u64,
        hashtype: String,
    ) -> GetTransactionProof {
        GetTransactionProof {
            proof,
            stibhash,
            treedepth,
            idx,
            hashtype,
        }
    }
}
