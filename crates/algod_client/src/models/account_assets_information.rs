/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::AccountAssetHolding;

/// AccountAssetsInformationResponse contains a list of assets held by an account.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct AccountAssetsInformation {
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    pub round: u64,
    /// Used for pagination, when making another request provide this token with the next parameter.
    #[serde(rename = "next-token", skip_serializing_if = "Option::is_none")]
    pub next_token: Option<String>,
    #[serde(rename = "asset-holdings", skip_serializing_if = "Option::is_none")]
    pub asset_holdings: Option<Vec<AccountAssetHolding>>,
}

impl AccountAssetsInformation {
    /// Constructor for AccountAssetsInformation
    pub fn new(round: u64) -> AccountAssetsInformation {
        AccountAssetsInformation {
            round,
            next_token: None,
            asset_holdings: None,
        }
    }
}
