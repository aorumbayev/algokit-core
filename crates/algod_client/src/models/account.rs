/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::AccountParticipation;
use crate::models::Application;
use crate::models::ApplicationLocalState;
use crate::models::ApplicationStateSchema;
use crate::models::Asset;
use crate::models::AssetHolding;

/// Account information at a given round.
///
/// Definition:
/// data/basics/userBalance.go : AccountData
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct Account {
    /// the account public key
    #[serde(rename = "address")]
    pub address: String,
    /// \[algo\] total number of MicroAlgos in the account
    #[serde(rename = "amount")]
    pub amount: u64,
    /// MicroAlgo balance required by the account.
    ///
    /// The requirement grows based on asset and application usage.
    #[serde(rename = "min-balance")]
    pub min_balance: u64,
    /// specifies the amount of MicroAlgos in the account, without the pending rewards.
    #[serde(rename = "amount-without-pending-rewards")]
    pub amount_without_pending_rewards: u64,
    /// \[appl\] applications local data stored in this account.
    ///
    /// Note the raw object uses `map[int] -> AppLocalState` for this type.
    #[serde(rename = "apps-local-state", skip_serializing_if = "Option::is_none")]
    pub apps_local_state: Option<Vec<ApplicationLocalState>>,
    /// The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.
    #[serde(rename = "total-apps-opted-in")]
    pub total_apps_opted_in: u64,
    #[serde(rename = "apps-total-schema", skip_serializing_if = "Option::is_none")]
    pub apps_total_schema: Option<ApplicationStateSchema>,
    /// \[teap\] the sum of all extra application program pages for this account.
    #[serde(
        rename = "apps-total-extra-pages",
        skip_serializing_if = "Option::is_none"
    )]
    pub apps_total_extra_pages: Option<u64>,
    /// \[asset\] assets held by this account.
    ///
    /// Note the raw object uses `map[int] -> AssetHolding` for this type.
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Vec<AssetHolding>>,
    /// The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.
    #[serde(rename = "total-assets-opted-in")]
    pub total_assets_opted_in: u64,
    /// \[appp\] parameters of applications created by this account including app global data.
    ///
    /// Note: the raw account uses `map[int] -> AppParams` for this type.
    #[serde(rename = "created-apps", skip_serializing_if = "Option::is_none")]
    pub created_apps: Option<Vec<Application>>,
    /// The count of all apps (AppParams objects) created by this account.
    #[serde(rename = "total-created-apps")]
    pub total_created_apps: u64,
    /// \[apar\] parameters of assets created by this account.
    ///
    /// Note: the raw account uses `map[int] -> Asset` for this type.
    #[serde(rename = "created-assets", skip_serializing_if = "Option::is_none")]
    pub created_assets: Option<Vec<Asset>>,
    /// The count of all assets (AssetParams objects) created by this account.
    #[serde(rename = "total-created-assets")]
    pub total_created_assets: u64,
    /// \[tbx\] The number of existing boxes created by this account's app.
    #[serde(rename = "total-boxes", skip_serializing_if = "Option::is_none")]
    pub total_boxes: Option<u64>,
    /// \[tbxb\] The total number of bytes used by this account's app's box keys and values.
    #[serde(rename = "total-box-bytes", skip_serializing_if = "Option::is_none")]
    pub total_box_bytes: Option<u64>,
    #[serde(rename = "participation", skip_serializing_if = "Option::is_none")]
    pub participation: Option<AccountParticipation>,
    /// Whether or not the account can receive block incentives if its balance is in range at proposal time.
    #[serde(rename = "incentive-eligible", skip_serializing_if = "Option::is_none")]
    pub incentive_eligible: Option<bool>,
    /// amount of MicroAlgos of pending rewards in this account.
    #[serde(rename = "pending-rewards")]
    pub pending_rewards: u64,
    /// \[ebase\] used as part of the rewards computation. Only applicable to accounts which are participating.
    #[serde(rename = "reward-base", skip_serializing_if = "Option::is_none")]
    pub reward_base: Option<u64>,
    /// \[ern\] total rewards of MicroAlgos the account has received, including pending rewards.
    #[serde(rename = "rewards")]
    pub rewards: u64,
    /// The round for which this information is relevant.
    #[serde(rename = "round")]
    pub round: u64,
    /// \[onl\] delegation status of the account's MicroAlgos
    ///   * Offline - indicates that the associated account is delegated.
    ///   *  Online  - indicates that the associated account used as part of the delegation pool.
    ///   *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.
    #[serde(rename = "status")]
    pub status: String,
    /// Indicates what type of signature is used by this account, must be one of:
    ///   * sig
    ///   * msig
    ///   * lsig
    #[serde(rename = "sig-type", skip_serializing_if = "Option::is_none")]
    pub sig_type: Option<String>,
    /// \[spend\] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.
    #[serde(rename = "auth-addr", skip_serializing_if = "Option::is_none")]
    pub auth_addr: Option<String>,
    /// The round in which this account last proposed the block.
    #[serde(rename = "last-proposed", skip_serializing_if = "Option::is_none")]
    pub last_proposed: Option<u64>,
    /// The round in which this account last went online, or explicitly renewed their online status.
    #[serde(rename = "last-heartbeat", skip_serializing_if = "Option::is_none")]
    pub last_heartbeat: Option<u64>,
}

impl AlgorandMsgpack for Account {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl Account {
    /// Constructor for Account
    pub fn new(
        address: String,
        amount: u64,
        min_balance: u64,
        amount_without_pending_rewards: u64,
        total_apps_opted_in: u64,
        total_assets_opted_in: u64,
        total_created_apps: u64,
        total_created_assets: u64,
        pending_rewards: u64,
        rewards: u64,
        round: u64,
        status: String,
    ) -> Account {
        Account {
            address,
            amount,
            min_balance,
            amount_without_pending_rewards,
            total_apps_opted_in,
            total_assets_opted_in,
            total_created_apps,
            total_created_assets,
            pending_rewards,
            rewards,
            round,
            status,
            apps_local_state: None,
            apps_total_schema: None,
            apps_total_extra_pages: None,
            assets: None,
            created_apps: None,
            created_assets: None,
            total_boxes: None,
            total_box_bytes: None,
            participation: None,
            incentive_eligible: None,
            reward_base: None,
            sig_type: None,
            auth_addr: None,
            last_proposed: None,
            last_heartbeat: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
