/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::SimulateTransactionResult;
use crate::models::SimulateUnnamedResourcesAccessed;

/// Simulation result for an atomic transaction group
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateTransactionGroupResult {
    /// Simulation result for individual transactions
    #[serde(rename = "txn-results")]
    pub txn_results: Vec<SimulateTransactionResult>,
    /// If present, indicates that the transaction group failed and specifies why that happened
    #[serde(rename = "failure-message", skip_serializing_if = "Option::is_none")]
    pub failure_message: Option<String>,
    /// If present, indicates which transaction in this group caused the failure. This array represents the path to the failing transaction. Indexes are zero based, the first element indicates the top-level transaction, and successive elements indicate deeper inner transactions.
    #[serde(rename = "failed-at", skip_serializing_if = "Option::is_none")]
    pub failed_at: Option<Vec<u64>>,
    /// Total budget added during execution of app calls in the transaction group.
    #[serde(rename = "app-budget-added", skip_serializing_if = "Option::is_none")]
    pub app_budget_added: Option<u64>,
    /// Total budget consumed during execution of app calls in the transaction group.
    #[serde(
        rename = "app-budget-consumed",
        skip_serializing_if = "Option::is_none"
    )]
    pub app_budget_consumed: Option<u64>,
    #[serde(
        rename = "unnamed-resources-accessed",
        skip_serializing_if = "Option::is_none"
    )]
    pub unnamed_resources_accessed: Option<SimulateUnnamedResourcesAccessed>,
}

impl AlgorandMsgpack for SimulateTransactionGroupResult {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulateTransactionGroupResult {
    /// Constructor for SimulateTransactionGroupResult
    pub fn new(txn_results: Vec<SimulateTransactionResult>) -> SimulateTransactionGroupResult {
        SimulateTransactionGroupResult {
            txn_results,
            failure_message: None,
            failed_at: None,
            app_budget_added: None,
            app_budget_consumed: None,
            unnamed_resources_accessed: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
