/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

use crate::models::PendingTransactionResponse;
use crate::models::SimulateUnnamedResourcesAccessed;
use crate::models::SimulationTransactionExecTrace;

/// Simulation result for an individual transaction
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimulateTransactionResult {
    #[serde(rename = "txn-result")]
    pub txn_result: PendingTransactionResponse,
    /// Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.
    #[serde(
        rename = "app-budget-consumed",
        skip_serializing_if = "Option::is_none"
    )]
    pub app_budget_consumed: Option<u32>,
    /// Budget used during execution of a logic sig transaction.
    #[serde(
        rename = "logic-sig-budget-consumed",
        skip_serializing_if = "Option::is_none"
    )]
    pub logic_sig_budget_consumed: Option<u32>,
    #[serde(rename = "exec-trace", skip_serializing_if = "Option::is_none")]
    pub exec_trace: Option<SimulationTransactionExecTrace>,
    #[serde(
        rename = "unnamed-resources-accessed",
        skip_serializing_if = "Option::is_none"
    )]
    pub unnamed_resources_accessed: Option<SimulateUnnamedResourcesAccessed>,
    /// The account that needed to sign this transaction when no signature was provided and the provided signer was incorrect.
    #[serde(rename = "fixed-signer", skip_serializing_if = "Option::is_none")]
    pub fixed_signer: Option<String>,
}

impl AlgorandMsgpack for SimulateTransactionResult {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulateTransactionResult {
    /// Constructor for SimulateTransactionResult
    pub fn new(txn_result: PendingTransactionResponse) -> SimulateTransactionResult {
        SimulateTransactionResult {
            txn_result,
            app_budget_consumed: None,
            logic_sig_budget_consumed: None,
            exec_trace: None,
            unnamed_resources_accessed: None,
            fixed_signer: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
