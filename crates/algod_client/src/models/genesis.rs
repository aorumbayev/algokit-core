/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::GenesisAllocation;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Genesis {
    #[serde(rename = "alloc")]
    pub alloc: Vec<GenesisAllocation>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "devmode", skip_serializing_if = "Option::is_none")]
    pub devmode: Option<bool>,
    #[serde(rename = "fees")]
    pub fees: String,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "network")]
    pub network: String,
    #[serde(rename = "proto")]
    pub proto: String,
    #[serde(rename = "rwd")]
    pub rwd: String,
    #[serde(rename = "timestamp")]
    pub timestamp: u64,
}

impl Genesis {
    /// Constructor for Genesis
    pub fn new(
        alloc: Vec<GenesisAllocation>,
        fees: String,
        id: String,
        network: String,
        proto: String,
        rwd: String,
        timestamp: u64,
    ) -> Genesis {
        Genesis {
            alloc,
            fees,
            id,
            network,
            proto,
            rwd,
            timestamp,
            comment: None,
            devmode: None,
        }
    }
}
