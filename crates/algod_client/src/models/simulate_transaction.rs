/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
#[cfg(not(feature = "ffi_uniffi"))]
use algokit_transact::SignedTransaction as AlgokitSignedTransaction;
use serde::{Deserialize, Serialize};

#[cfg(feature = "ffi_uniffi")]
use algokit_transact_ffi::SignedTransaction as AlgokitSignedTransaction;

use algokit_transact::AlgorandMsgpack;

use crate::models::SimulateInitialStates;
use crate::models::SimulateTraceConfig;
use crate::models::SimulateTransactionGroupResult;
use crate::models::SimulationEvalOverrides;

/// Result of a transaction group simulation.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SimulateTransaction {
    /// The version of this response object.
    #[serde(rename = "version")]
    pub version: u64,
    /// The round immediately preceding this simulation. State changes through this round were used to run this simulation.
    #[serde(rename = "last-round")]
    pub last_round: u64,
    /// A result object for each transaction group that was simulated.
    #[serde(rename = "txn-groups")]
    pub txn_groups: Vec<SimulateTransactionGroupResult>,
    #[serde(rename = "eval-overrides", skip_serializing_if = "Option::is_none")]
    pub eval_overrides: Option<SimulationEvalOverrides>,
    #[serde(rename = "exec-trace-config", skip_serializing_if = "Option::is_none")]
    pub exec_trace_config: Option<SimulateTraceConfig>,
    #[serde(rename = "initial-states", skip_serializing_if = "Option::is_none")]
    pub initial_states: Option<SimulateInitialStates>,
}

impl AlgorandMsgpack for SimulateTransaction {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl SimulateTransaction {
    /// Constructor for SimulateTransaction
    pub fn new(
        version: u64,
        last_round: u64,
        txn_groups: Vec<SimulateTransactionGroupResult>,
    ) -> SimulateTransaction {
        SimulateTransaction {
            version,
            last_round,
            txn_groups,
            eval_overrides: None,
            exec_trace_config: None,
            initial_states: None,
        }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
