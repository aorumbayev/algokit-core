/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::serde_as;

use crate::models::StateProofMessage;

/// Represents a state proof and its corresponding message
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateProof {
    #[serde(rename = "Message")]
    pub message: StateProofMessage,
    /// The encoded StateProof for the message.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "StateProof")]
    pub state_proof: Vec<u8>,
}

impl StateProof {
    /// Constructor for StateProof
    pub fn new(message: StateProofMessage, state_proof: Vec<u8>) -> StateProof {
        StateProof {
            message,
            state_proof,
        }
    }
}
