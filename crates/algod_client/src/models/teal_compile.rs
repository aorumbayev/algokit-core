/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::UnknownJsonValue;

/// Teal compile Result
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct TealCompile {
    /// base32 SHA512_256 of program bytes (Address style)
    #[serde(rename = "hash")]
    pub hash: String,
    /// base64 encoded program bytes
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "result")]
    pub result: Vec<u8>,
    /// JSON of the source map
    #[serde(rename = "sourcemap", skip_serializing_if = "Option::is_none")]
    pub sourcemap: Option<UnknownJsonValue>,
}

impl TealCompile {
    /// Constructor for TealCompile
    pub fn new(hash: String, result: Vec<u8>) -> TealCompile {
        TealCompile {
            hash,
            result,
            sourcemap: None,
        }
    }
}
