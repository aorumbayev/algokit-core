/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use algokit_transact::{AlgorandMsgpack, SignedTransaction as AlgokitSignedTransaction};
use serde::{Deserialize, Serialize};

/// Encoded block object.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GetBlock {
    /// Block header data.
    #[serde(rename = "block")]
    pub block: serde_json::Value,
    /// Optional certificate object. This is only included when the format is set to message pack.
    #[serde(rename = "cert", skip_serializing_if = "Option::is_none")]
    pub cert: Option<serde_json::Value>,
}

impl AlgorandMsgpack for GetBlock {
    const PREFIX: &'static [u8] = b""; // Adjust prefix as needed for your specific type
}

impl GetBlock {
    /// Constructor for GetBlock
    pub fn new(block: serde_json::Value) -> GetBlock {
        GetBlock { block, cert: None }
    }

    /// Encode this struct to msgpack bytes using AlgorandMsgpack trait
    pub fn to_msgpack(&self) -> Result<Vec<u8>, Box<dyn std::error::Error>> {
        Ok(self.encode()?)
    }

    /// Decode msgpack bytes to this struct using AlgorandMsgpack trait
    pub fn from_msgpack(bytes: &[u8]) -> Result<Self, Box<dyn std::error::Error>> {
        Ok(Self::decode(bytes)?)
    }
}
