/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::AccountStateDelta;
use crate::models::DryrunState;
use crate::models::StateDelta;

/// DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DryrunTxnResult {
    /// Disassembled program line by line.
    #[serde(rename = "disassembly")]
    pub disassembly: Vec<String>,
    /// Disassembled lsig program line by line.
    #[serde(
        rename = "logic-sig-disassembly",
        skip_serializing_if = "Option::is_none"
    )]
    pub logic_sig_disassembly: Option<Vec<String>>,
    #[serde(rename = "logic-sig-trace", skip_serializing_if = "Option::is_none")]
    pub logic_sig_trace: Option<Vec<DryrunState>>,
    #[serde(rename = "logic-sig-messages", skip_serializing_if = "Option::is_none")]
    pub logic_sig_messages: Option<Vec<String>>,
    #[serde(rename = "app-call-trace", skip_serializing_if = "Option::is_none")]
    pub app_call_trace: Option<Vec<DryrunState>>,
    #[serde(rename = "app-call-messages", skip_serializing_if = "Option::is_none")]
    pub app_call_messages: Option<Vec<String>>,
    #[serde(rename = "global-delta", skip_serializing_if = "Option::is_none")]
    pub global_delta: Option<StateDelta>,
    #[serde(rename = "local-deltas", skip_serializing_if = "Option::is_none")]
    pub local_deltas: Option<Vec<AccountStateDelta>>,
    #[serde(rename = "logs", skip_serializing_if = "Option::is_none")]
    pub logs: Option<Vec<String>>,
    /// Budget added during execution of app call transaction.
    #[serde(rename = "budget-added", skip_serializing_if = "Option::is_none")]
    pub budget_added: Option<u32>,
    /// Budget consumed during execution of app call transaction.
    #[serde(rename = "budget-consumed", skip_serializing_if = "Option::is_none")]
    pub budget_consumed: Option<u32>,
}

impl DryrunTxnResult {
    /// Constructor for DryrunTxnResult
    pub fn new(disassembly: Vec<String>) -> DryrunTxnResult {
        DryrunTxnResult {
            disassembly,
            logic_sig_disassembly: None,
            logic_sig_trace: None,
            logic_sig_messages: None,
            app_call_trace: None,
            app_call_messages: None,
            global_delta: None,
            local_deltas: None,
            logs: None,
            budget_added: None,
            budget_consumed: None,
        }
    }
}
