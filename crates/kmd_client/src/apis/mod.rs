/*
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

// Consolidated client
pub mod client;

// Individual endpoint modules
pub mod create_wallet;
pub mod delete_key;
pub mod delete_multisig;
pub mod export_key;
pub mod export_master_key;
pub mod export_multisig;
pub mod generate_key;
pub mod get_version;
pub mod get_wallet_info;
pub mod import_key;
pub mod import_multisig;
pub mod init_wallet_handle_token;
pub mod list_keys_in_wallet;
pub mod list_multisg;
pub mod list_wallets;
pub mod release_wallet_handle_token;
pub mod rename_wallet;
pub mod renew_wallet_handle_token;
pub mod sign_multisig_program;
pub mod sign_multisig_transaction;
pub mod sign_program;
pub mod sign_transaction;
pub mod swagger_handler;

use snafu::Snafu;

/// Unified error type that can represent any API error from any endpoint
#[derive(Debug, Snafu)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum KmdApiError {
    #[snafu(display("Swagger_handler error: {error:?}"))]
    SwaggerHandler {
        error: swagger_handler::SwaggerHandlerError,
    },
    #[snafu(display("Generate_key error: {error:?}"))]
    GenerateKey {
        error: generate_key::GenerateKeyError,
    },
    #[snafu(display("Delete_key error: {error:?}"))]
    DeleteKey { error: delete_key::DeleteKeyError },
    #[snafu(display("Export_key error: {error:?}"))]
    ExportKey { error: export_key::ExportKeyError },
    #[snafu(display("Import_key error: {error:?}"))]
    ImportKey { error: import_key::ImportKeyError },
    #[snafu(display("List_keys_in_wallet error: {error:?}"))]
    ListKeysInWallet {
        error: list_keys_in_wallet::ListKeysInWalletError,
    },
    #[snafu(display("Export_master_key error: {error:?}"))]
    ExportMasterKey {
        error: export_master_key::ExportMasterKeyError,
    },
    #[snafu(display("Delete_multisig error: {error:?}"))]
    DeleteMultisig {
        error: delete_multisig::DeleteMultisigError,
    },
    #[snafu(display("Export_multisig error: {error:?}"))]
    ExportMultisig {
        error: export_multisig::ExportMultisigError,
    },
    #[snafu(display("Import_multisig error: {error:?}"))]
    ImportMultisig {
        error: import_multisig::ImportMultisigError,
    },
    #[snafu(display("List_multisg error: {error:?}"))]
    ListMultisg {
        error: list_multisg::ListMultisgError,
    },
    #[snafu(display("Sign_multisig_transaction error: {error:?}"))]
    SignMultisigTransaction {
        error: sign_multisig_transaction::SignMultisigTransactionError,
    },
    #[snafu(display("Sign_multisig_program error: {error:?}"))]
    SignMultisigProgram {
        error: sign_multisig_program::SignMultisigProgramError,
    },
    #[snafu(display("Sign_program error: {error:?}"))]
    SignProgram {
        error: sign_program::SignProgramError,
    },
    #[snafu(display("Sign_transaction error: {error:?}"))]
    SignTransaction {
        error: sign_transaction::SignTransactionError,
    },
    #[snafu(display("Create_wallet error: {error:?}"))]
    CreateWallet {
        error: create_wallet::CreateWalletError,
    },
    #[snafu(display("Get_wallet_info error: {error:?}"))]
    GetWalletInfo {
        error: get_wallet_info::GetWalletInfoError,
    },
    #[snafu(display("Init_wallet_handle_token error: {error:?}"))]
    InitWalletHandleToken {
        error: init_wallet_handle_token::InitWalletHandleTokenError,
    },
    #[snafu(display("Release_wallet_handle_token error: {error:?}"))]
    ReleaseWalletHandleToken {
        error: release_wallet_handle_token::ReleaseWalletHandleTokenError,
    },
    #[snafu(display("Rename_wallet error: {error:?}"))]
    RenameWallet {
        error: rename_wallet::RenameWalletError,
    },
    #[snafu(display("Renew_wallet_handle_token error: {error:?}"))]
    RenewWalletHandleToken {
        error: renew_wallet_handle_token::RenewWalletHandleTokenError,
    },
    #[snafu(display("List_wallets error: {error:?}"))]
    ListWallets {
        error: list_wallets::ListWalletsError,
    },
    #[snafu(display("Get_version error: {error:?}"))]
    GetVersion { error: get_version::GetVersionError },
    #[snafu(display("Unknown API error: {message}"))]
    Unknown { message: String },
}

impl From<swagger_handler::SwaggerHandlerError> for KmdApiError {
    fn from(err: swagger_handler::SwaggerHandlerError) -> Self {
        KmdApiError::SwaggerHandler { error: err }
    }
}

impl From<generate_key::GenerateKeyError> for KmdApiError {
    fn from(err: generate_key::GenerateKeyError) -> Self {
        KmdApiError::GenerateKey { error: err }
    }
}

impl From<delete_key::DeleteKeyError> for KmdApiError {
    fn from(err: delete_key::DeleteKeyError) -> Self {
        KmdApiError::DeleteKey { error: err }
    }
}

impl From<export_key::ExportKeyError> for KmdApiError {
    fn from(err: export_key::ExportKeyError) -> Self {
        KmdApiError::ExportKey { error: err }
    }
}

impl From<import_key::ImportKeyError> for KmdApiError {
    fn from(err: import_key::ImportKeyError) -> Self {
        KmdApiError::ImportKey { error: err }
    }
}

impl From<list_keys_in_wallet::ListKeysInWalletError> for KmdApiError {
    fn from(err: list_keys_in_wallet::ListKeysInWalletError) -> Self {
        KmdApiError::ListKeysInWallet { error: err }
    }
}

impl From<export_master_key::ExportMasterKeyError> for KmdApiError {
    fn from(err: export_master_key::ExportMasterKeyError) -> Self {
        KmdApiError::ExportMasterKey { error: err }
    }
}

impl From<delete_multisig::DeleteMultisigError> for KmdApiError {
    fn from(err: delete_multisig::DeleteMultisigError) -> Self {
        KmdApiError::DeleteMultisig { error: err }
    }
}

impl From<export_multisig::ExportMultisigError> for KmdApiError {
    fn from(err: export_multisig::ExportMultisigError) -> Self {
        KmdApiError::ExportMultisig { error: err }
    }
}

impl From<import_multisig::ImportMultisigError> for KmdApiError {
    fn from(err: import_multisig::ImportMultisigError) -> Self {
        KmdApiError::ImportMultisig { error: err }
    }
}

impl From<list_multisg::ListMultisgError> for KmdApiError {
    fn from(err: list_multisg::ListMultisgError) -> Self {
        KmdApiError::ListMultisg { error: err }
    }
}

impl From<sign_multisig_transaction::SignMultisigTransactionError> for KmdApiError {
    fn from(err: sign_multisig_transaction::SignMultisigTransactionError) -> Self {
        KmdApiError::SignMultisigTransaction { error: err }
    }
}

impl From<sign_multisig_program::SignMultisigProgramError> for KmdApiError {
    fn from(err: sign_multisig_program::SignMultisigProgramError) -> Self {
        KmdApiError::SignMultisigProgram { error: err }
    }
}

impl From<sign_program::SignProgramError> for KmdApiError {
    fn from(err: sign_program::SignProgramError) -> Self {
        KmdApiError::SignProgram { error: err }
    }
}

impl From<sign_transaction::SignTransactionError> for KmdApiError {
    fn from(err: sign_transaction::SignTransactionError) -> Self {
        KmdApiError::SignTransaction { error: err }
    }
}

impl From<create_wallet::CreateWalletError> for KmdApiError {
    fn from(err: create_wallet::CreateWalletError) -> Self {
        KmdApiError::CreateWallet { error: err }
    }
}

impl From<get_wallet_info::GetWalletInfoError> for KmdApiError {
    fn from(err: get_wallet_info::GetWalletInfoError) -> Self {
        KmdApiError::GetWalletInfo { error: err }
    }
}

impl From<init_wallet_handle_token::InitWalletHandleTokenError> for KmdApiError {
    fn from(err: init_wallet_handle_token::InitWalletHandleTokenError) -> Self {
        KmdApiError::InitWalletHandleToken { error: err }
    }
}

impl From<release_wallet_handle_token::ReleaseWalletHandleTokenError> for KmdApiError {
    fn from(err: release_wallet_handle_token::ReleaseWalletHandleTokenError) -> Self {
        KmdApiError::ReleaseWalletHandleToken { error: err }
    }
}

impl From<rename_wallet::RenameWalletError> for KmdApiError {
    fn from(err: rename_wallet::RenameWalletError) -> Self {
        KmdApiError::RenameWallet { error: err }
    }
}

impl From<renew_wallet_handle_token::RenewWalletHandleTokenError> for KmdApiError {
    fn from(err: renew_wallet_handle_token::RenewWalletHandleTokenError) -> Self {
        KmdApiError::RenewWalletHandleToken { error: err }
    }
}

impl From<list_wallets::ListWalletsError> for KmdApiError {
    fn from(err: list_wallets::ListWalletsError) -> Self {
        KmdApiError::ListWallets { error: err }
    }
}

impl From<get_version::GetVersionError> for KmdApiError {
    fn from(err: get_version::GetVersionError) -> Self {
        KmdApiError::GetVersion { error: err }
    }
}

/// The main error type for all kmd client operations
#[derive(Debug, Snafu)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Error))]
pub enum Error {
    #[snafu(display("HTTP error: {source}"))]
    Http {
        source: algokit_http_client::HttpError,
    },
    #[snafu(display("Serialization error: {message}"))]
    Serde { message: String },
    #[snafu(display("API error: {source}"))]
    Api { source: KmdApiError },
}

#[derive(Debug, PartialEq, Eq)]
pub enum ContentType {
    Json,
    MsgPack,
    Text,
    Unsupported(String),
}

impl From<&str> for ContentType {
    fn from(content_type: &str) -> Self {
        if content_type.contains("application/json") {
            ContentType::Json
        } else if content_type.contains("application/msgpack") {
            ContentType::MsgPack
        } else if content_type.contains("text/plain") {
            ContentType::Text
        } else {
            ContentType::Unsupported(content_type.to_string())
        }
    }
}

pub fn urlencode<T: AsRef<str>>(s: T) -> String {
    ::url::form_urlencoded::byte_serialize(s.as_ref().as_bytes()).collect()
}

// Re-export the consolidated client
pub use client::KmdClient;

// Re-export all endpoint functions
pub use create_wallet::{CreateWalletError, create_wallet};
pub use delete_key::{DeleteKeyError, delete_key};
pub use delete_multisig::{DeleteMultisigError, delete_multisig};
pub use export_key::{ExportKeyError, export_key};
pub use export_master_key::{ExportMasterKeyError, export_master_key};
pub use export_multisig::{ExportMultisigError, export_multisig};
pub use generate_key::{GenerateKeyError, generate_key};
pub use get_version::{GetVersionError, get_version};
pub use get_wallet_info::{GetWalletInfoError, get_wallet_info};
pub use import_key::{ImportKeyError, import_key};
pub use import_multisig::{ImportMultisigError, import_multisig};
pub use init_wallet_handle_token::{InitWalletHandleTokenError, init_wallet_handle_token};
pub use list_keys_in_wallet::{ListKeysInWalletError, list_keys_in_wallet};
pub use list_multisg::{ListMultisgError, list_multisg};
pub use list_wallets::{ListWalletsError, list_wallets};
pub use release_wallet_handle_token::{ReleaseWalletHandleTokenError, release_wallet_handle_token};
pub use rename_wallet::{RenameWalletError, rename_wallet};
pub use renew_wallet_handle_token::{RenewWalletHandleTokenError, renew_wallet_handle_token};
pub use sign_multisig_program::{SignMultisigProgramError, sign_multisig_program};
pub use sign_multisig_transaction::{SignMultisigTransactionError, sign_multisig_transaction};
pub use sign_program::{SignProgramError, sign_program};
pub use sign_transaction::{SignTransactionError, sign_transaction};
pub use swagger_handler::{SwaggerHandlerError, swagger_handler};
