#![allow(clippy::let_and_return)]

/*
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use super::Error;
use crate::models::{
    CreateWalletRequest, DeleteKeyRequest, DeleteKeyResponse, DeleteMultisigRequest,
    DeleteMultisigResponse, ExportKeyRequest, ExportMasterKeyRequest, ExportMultisigRequest,
    GenerateKeyRequest, GetWalletsResponse, ImportKeyRequest, ImportMultisigRequest,
    InitWalletHandleTokenRequest, ListKeysRequest, ListMultisigRequest, ListWalletsRequest,
    PostKeyExportResponse, PostKeyImportResponse, PostKeyListResponse, PostKeyResponse,
    PostMasterKeyExportResponse, PostMultisigExportResponse, PostMultisigImportResponse,
    PostMultisigListResponse, PostMultisigProgramSignResponse, PostMultisigTransactionSignResponse,
    PostProgramSignResponse, PostTransactionSignResponse, PostWalletInfoResponse,
    PostWalletInitResponse, PostWalletReleaseResponse, PostWalletRenameResponse,
    PostWalletRenewResponse, PostWalletResponse, ReleaseWalletHandleTokenRequest,
    RenameWalletRequest, RenewWalletHandleTokenRequest, SignMultisigRequest,
    SignProgramMultisigRequest, SignProgramRequest, SignTransactionRequest, VersionsRequest,
    VersionsResponse, WalletInfoRequest,
};
use algokit_http_client::{DefaultHttpClient, HttpClient};
use std::sync::Arc;

/// The main Kmd API client.
///
/// This client provides convenient access to all Kmd API endpoints.
/// It wraps the lower-level endpoint functions with a more ergonomic interface.
/// All methods return a unified `Error` type that can represent any endpoint error.
#[derive(Clone)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Object))]
pub struct KmdClient {
    http_client: Arc<dyn HttpClient>,
}

#[cfg_attr(feature = "ffi_uniffi", uniffi::export)]
impl KmdClient {
    /// Create a new KmdClient with a custom http client.
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn new(http_client: Arc<dyn HttpClient>) -> Self {
        Self { http_client }
    }

    /// Create a new KmdClient for Algorand TestNet.
    #[cfg(feature = "default_client")]
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn testnet() -> Self {
        let http_client = Arc::new(DefaultHttpClient::new("http://localhost:7833"));
        Self::new(http_client)
    }

    /// Create a new KmdClient for Algorand MainNet.
    #[cfg(feature = "default_client")]
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn mainnet() -> Self {
        let http_client = Arc::new(DefaultHttpClient::new("http://localhost:7833"));
        Self::new(http_client)
    }

    /// Create a new KmdClient for a local localnet environment.
    #[cfg(feature = "default_client")]
    #[cfg_attr(feature = "ffi_uniffi", uniffi::constructor)]
    pub fn localnet() -> Self {
        let http_client = Arc::new(
            DefaultHttpClient::with_header(
                "http://localhost:4002",
                "X-KMD-API-Token",
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            )
            .expect("Failed to create HTTP client with API token header"),
        );
        Self::new(http_client)
    }
    /// Gets the current swagger spec.
    pub async fn swagger_handler(&self) -> Result<String, Error> {
        let result = super::swagger_handler::swagger_handler(self.http_client.as_ref()).await;

        result
    }

    /// Generate a key
    pub async fn generate_key(
        &self,
        request: GenerateKeyRequest,
    ) -> Result<PostKeyResponse, Error> {
        let result = super::generate_key::generate_key(self.http_client.as_ref(), request).await;

        result
    }

    /// Delete a key
    pub async fn delete_key(&self) -> Result<DeleteKeyResponse, Error> {
        let result = super::delete_key::delete_key(self.http_client.as_ref()).await;

        result
    }

    /// Export a key
    pub async fn export_key(
        &self,
        request: ExportKeyRequest,
    ) -> Result<PostKeyExportResponse, Error> {
        let result = super::export_key::export_key(self.http_client.as_ref(), request).await;

        result
    }

    /// Import a key
    pub async fn import_key(
        &self,
        request: ImportKeyRequest,
    ) -> Result<PostKeyImportResponse, Error> {
        let result = super::import_key::import_key(self.http_client.as_ref(), request).await;

        result
    }

    /// List keys in wallet
    pub async fn list_keys_in_wallet(
        &self,
        request: ListKeysRequest,
    ) -> Result<PostKeyListResponse, Error> {
        let result =
            super::list_keys_in_wallet::list_keys_in_wallet(self.http_client.as_ref(), request)
                .await;

        result
    }

    /// Export the master derivation key from a wallet
    pub async fn export_master_key(
        &self,
        request: ExportMasterKeyRequest,
    ) -> Result<PostMasterKeyExportResponse, Error> {
        let result =
            super::export_master_key::export_master_key(self.http_client.as_ref(), request).await;

        result
    }

    /// Delete a multisig
    pub async fn delete_multisig(&self) -> Result<DeleteMultisigResponse, Error> {
        let result = super::delete_multisig::delete_multisig(self.http_client.as_ref()).await;

        result
    }

    /// Export multisig address metadata
    pub async fn export_multisig(
        &self,
        request: ExportMultisigRequest,
    ) -> Result<PostMultisigExportResponse, Error> {
        let result =
            super::export_multisig::export_multisig(self.http_client.as_ref(), request).await;

        result
    }

    /// Import a multisig account
    pub async fn import_multisig(
        &self,
        request: ImportMultisigRequest,
    ) -> Result<PostMultisigImportResponse, Error> {
        let result =
            super::import_multisig::import_multisig(self.http_client.as_ref(), request).await;

        result
    }

    /// List multisig accounts
    pub async fn list_multisg(
        &self,
        request: ListMultisigRequest,
    ) -> Result<PostMultisigListResponse, Error> {
        let result = super::list_multisg::list_multisg(self.http_client.as_ref(), request).await;

        result
    }

    /// Sign a multisig transaction
    pub async fn sign_multisig_transaction(
        &self,
        request: SignMultisigRequest,
    ) -> Result<PostMultisigTransactionSignResponse, Error> {
        let result = super::sign_multisig_transaction::sign_multisig_transaction(
            self.http_client.as_ref(),
            request,
        )
        .await;

        result
    }

    /// Sign a program for a multisig account
    pub async fn sign_multisig_program(
        &self,
        request: SignProgramMultisigRequest,
    ) -> Result<PostMultisigProgramSignResponse, Error> {
        let result =
            super::sign_multisig_program::sign_multisig_program(self.http_client.as_ref(), request)
                .await;

        result
    }

    /// Sign program
    pub async fn sign_program(
        &self,
        request: SignProgramRequest,
    ) -> Result<PostProgramSignResponse, Error> {
        let result = super::sign_program::sign_program(self.http_client.as_ref(), request).await;

        result
    }

    /// Sign a transaction
    pub async fn sign_transaction(
        &self,
        request: SignTransactionRequest,
    ) -> Result<PostTransactionSignResponse, Error> {
        let result =
            super::sign_transaction::sign_transaction(self.http_client.as_ref(), request).await;

        result
    }

    /// Create a wallet
    pub async fn create_wallet(
        &self,
        request: CreateWalletRequest,
    ) -> Result<PostWalletResponse, Error> {
        let result = super::create_wallet::create_wallet(self.http_client.as_ref(), request).await;

        result
    }

    /// Get wallet info
    pub async fn get_wallet_info(
        &self,
        request: WalletInfoRequest,
    ) -> Result<PostWalletInfoResponse, Error> {
        let result =
            super::get_wallet_info::get_wallet_info(self.http_client.as_ref(), request).await;

        result
    }

    /// Initialize a wallet handle token
    pub async fn init_wallet_handle_token(
        &self,
        request: InitWalletHandleTokenRequest,
    ) -> Result<PostWalletInitResponse, Error> {
        let result = super::init_wallet_handle_token::init_wallet_handle_token(
            self.http_client.as_ref(),
            request,
        )
        .await;

        result
    }

    /// Release a wallet handle token
    pub async fn release_wallet_handle_token(
        &self,
        request: ReleaseWalletHandleTokenRequest,
    ) -> Result<PostWalletReleaseResponse, Error> {
        let result = super::release_wallet_handle_token::release_wallet_handle_token(
            self.http_client.as_ref(),
            request,
        )
        .await;

        result
    }

    /// Rename a wallet
    pub async fn rename_wallet(
        &self,
        request: RenameWalletRequest,
    ) -> Result<PostWalletRenameResponse, Error> {
        let result = super::rename_wallet::rename_wallet(self.http_client.as_ref(), request).await;

        result
    }

    /// Renew a wallet handle token
    pub async fn renew_wallet_handle_token(
        &self,
        request: RenewWalletHandleTokenRequest,
    ) -> Result<PostWalletRenewResponse, Error> {
        let result = super::renew_wallet_handle_token::renew_wallet_handle_token(
            self.http_client.as_ref(),
            request,
        )
        .await;

        result
    }

    /// List wallets
    pub async fn list_wallets(&self) -> Result<GetWalletsResponse, Error> {
        let result = super::list_wallets::list_wallets(self.http_client.as_ref()).await;

        result
    }

    /// Retrieves the current version
    pub async fn get_version(&self) -> Result<VersionsResponse, Error> {
        let result = super::get_version::get_version(self.http_client.as_ref()).await;

        result
    }
}

#[cfg(not(feature = "ffi_uniffi"))]
impl KmdClient {}

#[cfg_attr(feature = "ffi_uniffi", uniffi::export)]
#[cfg(feature = "ffi_uniffi")]
impl KmdClient {}
