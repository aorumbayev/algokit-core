/*
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// APIV1POSTProgramSignRequest is the request for `POST /v1/program/sign`
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct SignProgramRequest {
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<u8>>,
    #[serde(
        rename = "wallet_handle_token",
        skip_serializing_if = "Option::is_none"
    )]
    pub wallet_handle_token: Option<String>,
    #[serde(rename = "wallet_password", skip_serializing_if = "Option::is_none")]
    pub wallet_password: Option<String>,
}

impl SignProgramRequest {
    /// Default constructor for SignProgramRequest
    pub fn new() -> SignProgramRequest {
        SignProgramRequest::default()
    }
}
