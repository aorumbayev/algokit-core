/*
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::TxType;

/// APIV1Wallet is the API's representation of a wallet
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct Wallet {
    #[serde(rename = "driver_name", skip_serializing_if = "Option::is_none")]
    pub driver_name: Option<String>,
    #[serde(rename = "driver_version", skip_serializing_if = "Option::is_none")]
    pub driver_version: Option<u32>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "mnemonic_ux", skip_serializing_if = "Option::is_none")]
    pub mnemonic_ux: Option<bool>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "supported_txs", skip_serializing_if = "Option::is_none")]
    pub supported_txs: Option<Vec<TxType>>,
}

impl Wallet {
    /// Default constructor for Wallet
    pub fn new() -> Wallet {
        Wallet::default()
    }
}
