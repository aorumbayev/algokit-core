/*
 * for KMD HTTP API
 *
 * API for KMD (Key Management Daemon)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::PublicKey;

/// APIV1POSTMultisigImportRequest is the request for `POST /v1/multisig/import`
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ImportMultisigRequest {
    #[serde(rename = "multisig_version", skip_serializing_if = "Option::is_none")]
    pub multisig_version: Option<u8>,
    #[serde(rename = "pks", skip_serializing_if = "Option::is_none")]
    pub pks: Option<Vec<PublicKey>>,
    #[serde(rename = "threshold", skip_serializing_if = "Option::is_none")]
    pub threshold: Option<u8>,
    #[serde(
        rename = "wallet_handle_token",
        skip_serializing_if = "Option::is_none"
    )]
    pub wallet_handle_token: Option<String>,
}

impl ImportMultisigRequest {
    /// Default constructor for ImportMultisigRequest
    pub fn new() -> ImportMultisigRequest {
        ImportMultisigRequest::default()
    }
}
