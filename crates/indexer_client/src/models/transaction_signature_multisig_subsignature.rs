/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct TransactionSignatureMultisigSubsignature {
    /// \[pk\]
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "public-key", skip_serializing_if = "Option::is_none")]
    pub public_key: Option<Vec<u8>>,
    /// \[s\]
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "signature", skip_serializing_if = "Option::is_none")]
    pub signature: Option<Vec<u8>>,
}

impl TransactionSignatureMultisigSubsignature {
    /// Default constructor for TransactionSignatureMultisigSubsignature
    pub fn new() -> TransactionSignatureMultisigSubsignature {
        TransactionSignatureMultisigSubsignature::default()
    }
}
