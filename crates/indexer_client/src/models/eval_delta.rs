/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Represents a TEAL value delta.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct EvalDelta {
    /// \[at\] delta action.
    #[serde(rename = "action")]
    pub action: u32,
    /// \[bs\] bytes value.
    #[serde(rename = "bytes", skip_serializing_if = "Option::is_none")]
    pub bytes: Option<String>,
    /// \[ui\] uint value.
    #[serde(rename = "uint", skip_serializing_if = "Option::is_none")]
    pub uint: Option<u64>,
}

impl EvalDelta {
    /// Constructor for EvalDelta
    pub fn new(action: u32) -> EvalDelta {
        EvalDelta {
            action,
            bytes: None,
            uint: None,
        }
    }
}
