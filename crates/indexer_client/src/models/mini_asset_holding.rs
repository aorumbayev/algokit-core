/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// A simplified version of AssetHolding
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct MiniAssetHolding {
    #[serde(rename = "address")]
    pub address: String,
    #[serde(rename = "amount")]
    pub amount: u64,
    #[serde(rename = "is-frozen")]
    pub is_frozen: bool,
    /// Whether or not this asset holding is currently deleted from its account.
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Round during which the account opted into the asset.
    #[serde(rename = "opted-in-at-round", skip_serializing_if = "Option::is_none")]
    pub opted_in_at_round: Option<u64>,
    /// Round during which the account opted out of the asset.
    #[serde(rename = "opted-out-at-round", skip_serializing_if = "Option::is_none")]
    pub opted_out_at_round: Option<u64>,
}

impl MiniAssetHolding {
    /// Constructor for MiniAssetHolding
    pub fn new(address: String, amount: u64, is_frozen: bool) -> MiniAssetHolding {
        MiniAssetHolding {
            address,
            amount,
            is_frozen,
            deleted: None,
            opted_in_at_round: None,
            opted_out_at_round: None,
        }
    }
}
