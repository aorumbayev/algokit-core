/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::ApplicationParams;

/// Application index and its parameters
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Application {
    /// application index.
    #[serde(rename = "id")]
    pub id: u64,
    /// Whether or not this application is currently deleted.
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Round when this application was created.
    #[serde(rename = "created-at-round", skip_serializing_if = "Option::is_none")]
    pub created_at_round: Option<u64>,
    /// Round when this application was deleted.
    #[serde(rename = "deleted-at-round", skip_serializing_if = "Option::is_none")]
    pub deleted_at_round: Option<u64>,
    #[serde(rename = "params")]
    pub params: ApplicationParams,
}

impl Application {
    /// Constructor for Application
    pub fn new(id: u64, params: ApplicationParams) -> Application {
        Application {
            id,
            params,
            deleted: None,
            created_at_round: None,
            deleted_at_round: None,
        }
    }
}
