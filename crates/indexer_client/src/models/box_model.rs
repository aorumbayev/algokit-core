/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// Box name and its content.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct Box {
    /// The round for which this information is relevant
    #[serde(rename = "round")]
    pub round: u64,
    /// \[name\] box name, base64 encoded
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "name")]
    pub name: Vec<u8>,
    /// \[value\] box value, base64 encoded.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "value")]
    pub value: Vec<u8>,
}

impl Box {
    /// Constructor for Box
    pub fn new(round: u64, name: Vec<u8>, value: Vec<u8>) -> Box {
        Box { round, name, value }
    }
}
