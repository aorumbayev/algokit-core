/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::AssetHolding;

/// (empty)
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct LookupAccountAssets {
    /// Round at which the results were computed.
    #[serde(rename = "current-round")]
    pub current_round: u64,
    /// Used for pagination, when making another request provide this token with the next parameter.
    #[serde(rename = "next-token", skip_serializing_if = "Option::is_none")]
    pub next_token: Option<String>,
    #[serde(rename = "assets")]
    pub assets: Vec<AssetHolding>,
}

impl LookupAccountAssets {
    /// Constructor for LookupAccountAssets
    pub fn new(current_round: u64, assets: Vec<AssetHolding>) -> LookupAccountAssets {
        LookupAccountAssets {
            current_round,
            assets,
            next_token: None,
        }
    }
}
