/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::TransactionSignatureMultisigSubsignature;

/// \[msig\] structure holding multiple subsignatures.
///
/// Definition:
/// crypto/multisig.go : MultisigSig
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionSignatureMultisig {
    /// \[subsig\] holds pairs of public key and signatures.
    #[serde(rename = "subsignature", skip_serializing_if = "Option::is_none")]
    pub subsignature: Option<Vec<TransactionSignatureMultisigSubsignature>>,
    /// \[thr\]
    #[serde(rename = "threshold", skip_serializing_if = "Option::is_none")]
    pub threshold: Option<u64>,
    /// \[v\]
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<u64>,
}

impl TransactionSignatureMultisig {
    /// Default constructor for TransactionSignatureMultisig
    pub fn new() -> TransactionSignatureMultisig {
        TransactionSignatureMultisig::default()
    }
}
