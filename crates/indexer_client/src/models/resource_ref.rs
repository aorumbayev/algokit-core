/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::BoxReference;
use crate::models::HoldingRef;
use crate::models::LocalsRef;

/// ResourceRef names a single resource. Only one of the fields should be set.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ResourceRef {
    /// \[d\] Account whose balance record is accessible by the executing ApprovalProgram or ClearStateProgram.
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// \[p\] Application id whose GlobalState may be read by the executing
    /// ApprovalProgram or ClearStateProgram.
    #[serde(rename = "application-id", skip_serializing_if = "Option::is_none")]
    pub application_id: Option<u64>,
    /// \[s\] Asset whose AssetParams may be read by the executing
    /// ApprovalProgram or ClearStateProgram.
    #[serde(rename = "asset-id", skip_serializing_if = "Option::is_none")]
    pub asset_id: Option<u64>,
    #[serde(rename = "box", skip_serializing_if = "Option::is_none")]
    pub r#box: Option<BoxReference>,
    #[serde(rename = "holding", skip_serializing_if = "Option::is_none")]
    pub holding: Option<HoldingRef>,
    #[serde(rename = "local", skip_serializing_if = "Option::is_none")]
    pub local: Option<LocalsRef>,
}

impl ResourceRef {
    /// Default constructor for ResourceRef
    pub fn new() -> ResourceRef {
        ResourceRef::default()
    }
}
