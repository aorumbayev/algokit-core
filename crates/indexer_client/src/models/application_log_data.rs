/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// Stores the global information associated with an application.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationLogData {
    /// Transaction ID
    #[serde(rename = "txid")]
    pub txid: String,
    /// Logs for the application being executed by the transaction.
    #[serde_as(as = "Vec<serde_with::base64::Base64>")]
    #[serde(rename = "logs")]
    pub logs: Vec<Vec<u8>>,
}

impl ApplicationLogData {
    /// Constructor for ApplicationLogData
    pub fn new(txid: String, logs: Vec<Vec<u8>>) -> ApplicationLogData {
        ApplicationLogData { txid, logs }
    }
}
