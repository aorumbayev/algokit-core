/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// Represents a TEAL value.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TealValue {
    /// type of the value. Value `1` refers to **bytes**, value `2` refers to **uint**
    #[serde(rename = "type")]
    pub r#type: u32,
    /// bytes value.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "bytes")]
    pub bytes: Vec<u8>,
    /// uint value.
    #[serde(rename = "uint")]
    pub uint: u64,
}

impl TealValue {
    /// Constructor for TealValue
    pub fn new(r#type: u32, bytes: Vec<u8>, uint: u64) -> TealValue {
        TealValue {
            r#type,
            bytes,
            uint,
        }
    }
}
