/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Participation account data that needs to be checked/acted on by the network.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ParticipationUpdates {
    /// \[partupdrmv\] a list of online accounts that needs to be converted to offline since their participation key expired.
    #[serde(
        rename = "expired-participation-accounts",
        skip_serializing_if = "Option::is_none"
    )]
    pub expired_participation_accounts: Option<Vec<String>>,
    /// \[partupabs\] a list of online accounts that need to be suspended.
    #[serde(
        rename = "absent-participation-accounts",
        skip_serializing_if = "Option::is_none"
    )]
    pub absent_participation_accounts: Option<Vec<String>>,
}

impl ParticipationUpdates {
    /// Default constructor for ParticipationUpdates
    pub fn new() -> ParticipationUpdates {
        ParticipationUpdates::default()
    }
}
