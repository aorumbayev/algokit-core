/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::MerkleArrayProof;
use crate::models::StateProofReveal;

/// \[sp\] represents a state proof.
///
/// Definition:
/// crypto/stateproof/structs.go : StateProof
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct StateProofFields {
    /// \[c\]
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "sig-commit", skip_serializing_if = "Option::is_none")]
    pub sig_commit: Option<Vec<u8>>,
    /// \[w\]
    #[serde(rename = "signed-weight", skip_serializing_if = "Option::is_none")]
    pub signed_weight: Option<u64>,
    #[serde(rename = "sig-proofs", skip_serializing_if = "Option::is_none")]
    pub sig_proofs: Option<MerkleArrayProof>,
    #[serde(rename = "part-proofs", skip_serializing_if = "Option::is_none")]
    pub part_proofs: Option<MerkleArrayProof>,
    /// \[v\] Salt version of the merkle signature.
    #[serde(rename = "salt-version", skip_serializing_if = "Option::is_none")]
    pub salt_version: Option<u64>,
    /// \[r\] Note that this is actually stored as a map[uint64] - Reveal in the actual msgp
    #[serde(rename = "reveals", skip_serializing_if = "Option::is_none")]
    pub reveals: Option<Vec<StateProofReveal>>,
    /// \[pr\] Sequence of reveal positions.
    #[serde(
        rename = "positions-to-reveal",
        skip_serializing_if = "Option::is_none"
    )]
    pub positions_to_reveal: Option<Vec<u64>>,
}

impl StateProofFields {
    /// Default constructor for StateProofFields
    pub fn new() -> StateProofFields {
        StateProofFields::default()
    }
}
