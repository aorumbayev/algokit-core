/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::IndexerStateProofMessage;
use crate::models::StateProofFields;

/// Fields for a state proof transaction.
///
/// Definition:
/// data/transactions/stateproof.go : StateProofTxnFields
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct TransactionStateProof {
    /// \[sptype\] Type of the state proof. Integer representing an entry defined in protocol/stateproof.go
    #[serde(rename = "state-proof-type", skip_serializing_if = "Option::is_none")]
    pub state_proof_type: Option<u64>,
    #[serde(rename = "state-proof", skip_serializing_if = "Option::is_none")]
    pub state_proof: Option<StateProofFields>,
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<IndexerStateProofMessage>,
}

impl TransactionStateProof {
    /// Default constructor for TransactionStateProof
    pub fn new() -> TransactionStateProof {
        TransactionStateProof::default()
    }
}
