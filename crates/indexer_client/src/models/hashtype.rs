/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use std::fmt;
use std::str::FromStr;

/// The type of hash function used to create the proof, must be one of:
///   * sha512_256
///   * sha256
#[derive(Debug, Clone, Copy, PartialEq, Eq, Serialize, Deserialize, Default)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Enum))]
pub enum Hashtype {
    /// sha512_256
    #[serde(rename = "sha512_256")]
    #[default]
    Sha512256,
    /// sha256
    #[serde(rename = "sha256")]
    Sha256,
}

impl fmt::Display for Hashtype {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        let value = match self {
            Hashtype::Sha512256 => "sha512_256",
            Hashtype::Sha256 => "sha256",
        };
        write!(f, "{}", value)
    }
}

impl FromStr for Hashtype {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "sha512_256" => Ok(Hashtype::Sha512256),
            "sha256" => Ok(Hashtype::Sha256),
            _ => Err(format!("Invalid Hashtype: {}", s)),
        }
    }
}

impl Hashtype {
    /// Default constructor for Hashtype
    pub fn new() -> Hashtype {
        Hashtype::default()
    }
}
