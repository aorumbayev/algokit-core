/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateProofVerifier {
    /// \[cmt\] Represents the root of the vector commitment tree.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "commitment", skip_serializing_if = "Option::is_none")]
    pub commitment: Option<Vec<u8>>,
    /// \[lf\] Key lifetime.
    #[serde(rename = "key-lifetime", skip_serializing_if = "Option::is_none")]
    pub key_lifetime: Option<u64>,
}

impl StateProofVerifier {
    /// Default constructor for StateProofVerifier
    pub fn new() -> StateProofVerifier {
        StateProofVerifier::default()
    }
}
