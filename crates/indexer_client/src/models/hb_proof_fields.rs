/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

/// \[hbprf\] HbProof is a signature using HeartbeatAddress's partkey, thereby showing it is online.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct HbProofFields {
    /// \[s\] Signature of the heartbeat message.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "hb-sig", skip_serializing_if = "Option::is_none")]
    pub hb_sig: Option<Vec<u8>>,
    /// \[p\] Public key of the heartbeat message.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "hb-pk", skip_serializing_if = "Option::is_none")]
    pub hb_pk: Option<Vec<u8>>,
    /// \[p2\] Key for new-style two-level ephemeral signature.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "hb-pk2", skip_serializing_if = "Option::is_none")]
    pub hb_pk2: Option<Vec<u8>>,
    /// \[p1s\] Signature of OneTimeSignatureSubkeyOffsetID(PK, Batch, Offset) under the key PK2.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "hb-pk1sig", skip_serializing_if = "Option::is_none")]
    pub hb_pk1sig: Option<Vec<u8>>,
    /// \[p2s\] Signature of OneTimeSignatureSubkeyBatchID(PK2, Batch) under the master key (OneTimeSignatureVerifier).
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "hb-pk2sig", skip_serializing_if = "Option::is_none")]
    pub hb_pk2sig: Option<Vec<u8>>,
}

impl HbProofFields {
    /// Default constructor for HbProofFields
    pub fn new() -> HbProofFields {
        HbProofFields::default()
    }
}
