/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::MerkleArrayProof;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StateProofSignature {
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "falcon-signature", skip_serializing_if = "Option::is_none")]
    pub falcon_signature: Option<Vec<u8>>,
    #[serde(rename = "merkle-array-index", skip_serializing_if = "Option::is_none")]
    pub merkle_array_index: Option<u64>,
    #[serde(rename = "proof", skip_serializing_if = "Option::is_none")]
    pub proof: Option<MerkleArrayProof>,
    /// \[vkey\]
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "verifying-key", skip_serializing_if = "Option::is_none")]
    pub verifying_key: Option<Vec<u8>>,
}

impl StateProofSignature {
    /// Default constructor for StateProofSignature
    pub fn new() -> StateProofSignature {
        StateProofSignature::default()
    }
}
