/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::HbProofFields;

/// Fields for a heartbeat transaction.
///
/// Definition:
/// data/transactions/heartbeat.go : HeartbeatTxnFields
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionHeartbeat {
    /// \[hbad\] HbAddress is the account this txn is proving onlineness for.
    #[serde(rename = "hb-address")]
    pub hb_address: String,
    #[serde(rename = "hb-proof")]
    pub hb_proof: HbProofFields,
    /// \[hbsd\] HbSeed must be the block seed for the this transaction's firstValid block.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "hb-seed")]
    pub hb_seed: Vec<u8>,
    /// \[hbvid\] HbVoteID must match the HbAddress account's current VoteID.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "hb-vote-id")]
    pub hb_vote_id: Vec<u8>,
    /// \[hbkd\] HbKeyDilution must match HbAddress account's current KeyDilution.
    #[serde(rename = "hb-key-dilution")]
    pub hb_key_dilution: u64,
}

impl TransactionHeartbeat {
    /// Constructor for TransactionHeartbeat
    pub fn new(
        hb_address: String,
        hb_proof: HbProofFields,
        hb_seed: Vec<u8>,
        hb_vote_id: Vec<u8>,
        hb_key_dilution: u64,
    ) -> TransactionHeartbeat {
        TransactionHeartbeat {
            hb_address,
            hb_proof,
            hb_seed,
            hb_vote_id,
            hb_key_dilution,
        }
    }
}
