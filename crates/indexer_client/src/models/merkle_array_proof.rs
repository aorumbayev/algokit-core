/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::HashFactory;

#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MerkleArrayProof {
    /// \[pth\]
    #[serde_as(as = "Option<Vec<Bytes>>")]
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<Vec<Vec<u8>>>,
    #[serde(rename = "hash-factory", skip_serializing_if = "Option::is_none")]
    pub hash_factory: Option<HashFactory>,
    /// \[td\]
    #[serde(rename = "tree-depth", skip_serializing_if = "Option::is_none")]
    pub tree_depth: Option<u64>,
}

impl MerkleArrayProof {
    /// Default constructor for MerkleArrayProof
    pub fn new() -> MerkleArrayProof {
        MerkleArrayProof::default()
    }
}
