/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};
use serde_with::{Bytes, serde_as};

use crate::models::ApplicationStateSchema;
use crate::models::TealKeyValueStore;

/// Stores the global information associated with an application.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
#[cfg_attr(feature = "ffi_uniffi", derive(uniffi::Record))]
pub struct ApplicationParams {
    /// The address that created this application. This is the address where the parameters and global state for this application can be found.
    #[serde(rename = "creator", skip_serializing_if = "Option::is_none")]
    pub creator: Option<String>,
    /// approval program.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(rename = "approval-program", skip_serializing_if = "Option::is_none")]
    pub approval_program: Option<Vec<u8>>,
    /// clear state program.
    #[serde_as(as = "Option<serde_with::base64::Base64>")]
    #[serde(
        rename = "clear-state-program",
        skip_serializing_if = "Option::is_none"
    )]
    pub clear_state_program: Option<Vec<u8>>,
    /// the number of extra program pages available to this app.
    #[serde(
        rename = "extra-program-pages",
        skip_serializing_if = "Option::is_none"
    )]
    pub extra_program_pages: Option<u32>,
    #[serde(rename = "local-state-schema", skip_serializing_if = "Option::is_none")]
    pub local_state_schema: Option<ApplicationStateSchema>,
    #[serde(
        rename = "global-state-schema",
        skip_serializing_if = "Option::is_none"
    )]
    pub global_state_schema: Option<ApplicationStateSchema>,
    #[serde(rename = "global-state", skip_serializing_if = "Option::is_none")]
    pub global_state: Option<TealKeyValueStore>,
    /// the number of updates to the application programs
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<u64>,
}

impl ApplicationParams {
    /// Default constructor for ApplicationParams
    pub fn new() -> ApplicationParams {
        ApplicationParams::default()
    }
}
