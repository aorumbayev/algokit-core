/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use crate::models;
use serde::{Deserialize, Serialize};

use crate::models::AssetParams;

/// Specifies both the unique identifier and the parameters for an asset
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Asset {
    /// unique asset identifier
    #[serde(rename = "index")]
    pub index: u64,
    /// Whether or not this asset is currently deleted.
    #[serde(rename = "deleted", skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Round during which this asset was created.
    #[serde(rename = "created-at-round", skip_serializing_if = "Option::is_none")]
    pub created_at_round: Option<u64>,
    /// Round during which this asset was destroyed.
    #[serde(rename = "destroyed-at-round", skip_serializing_if = "Option::is_none")]
    pub destroyed_at_round: Option<u64>,
    #[serde(rename = "params")]
    pub params: AssetParams,
}

impl Asset {
    /// Constructor for Asset
    pub fn new(index: u64, params: AssetParams) -> Asset {
        Asset {
            index,
            params,
            deleted: None,
            created_at_round: None,
            destroyed_at_round: None,
        }
    }
}
