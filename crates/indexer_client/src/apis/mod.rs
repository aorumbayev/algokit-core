/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

// Consolidated client
pub mod client;

// Parameter enums for type-safe API parameters
pub mod parameter_enums;

// Individual endpoint modules
pub mod lookup_account_app_local_states;
pub mod lookup_account_assets;
pub mod lookup_account_by_id;
pub mod lookup_account_created_applications;
pub mod lookup_account_created_assets;
pub mod lookup_account_transactions;
pub mod lookup_application_box_by_id_and_name;
pub mod lookup_application_by_id;
pub mod lookup_application_logs_by_id;
pub mod lookup_asset_balances;
pub mod lookup_asset_by_id;
pub mod lookup_asset_transactions;
pub mod lookup_block;
pub mod lookup_transaction;
pub mod make_health_check;
pub mod search_for_accounts;
pub mod search_for_application_boxes;
pub mod search_for_applications;
pub mod search_for_assets;
pub mod search_for_block_headers;
pub mod search_for_transactions;

use snafu::Snafu;

/// Unified error type that can represent any API error from any endpoint
#[derive(Debug, Snafu)]
pub enum IndexerApiError {
    #[snafu(display("Make_health_check error: {error:?}"))]
    MakeHealthCheck {
        error: make_health_check::MakeHealthCheckError,
    },
    #[snafu(display("Search_for_accounts error: {error:?}"))]
    SearchForAccounts {
        error: search_for_accounts::SearchForAccountsError,
    },
    #[snafu(display("Lookup_account_by_id error: {error:?}"))]
    LookupAccountById {
        error: lookup_account_by_id::LookupAccountByIdError,
    },
    #[snafu(display("Lookup_account_assets error: {error:?}"))]
    LookupAccountAssets {
        error: lookup_account_assets::LookupAccountAssetsError,
    },
    #[snafu(display("Lookup_account_created_assets error: {error:?}"))]
    LookupAccountCreatedAssets {
        error: lookup_account_created_assets::LookupAccountCreatedAssetsError,
    },
    #[snafu(display("Lookup_account_app_local_states error: {error:?}"))]
    LookupAccountAppLocalStates {
        error: lookup_account_app_local_states::LookupAccountAppLocalStatesError,
    },
    #[snafu(display("Lookup_account_created_applications error: {error:?}"))]
    LookupAccountCreatedApplications {
        error: lookup_account_created_applications::LookupAccountCreatedApplicationsError,
    },
    #[snafu(display("Lookup_account_transactions error: {error:?}"))]
    LookupAccountTransactions {
        error: lookup_account_transactions::LookupAccountTransactionsError,
    },
    #[snafu(display("Search_for_applications error: {error:?}"))]
    SearchForApplications {
        error: search_for_applications::SearchForApplicationsError,
    },
    #[snafu(display("Lookup_application_by_id error: {error:?}"))]
    LookupApplicationById {
        error: lookup_application_by_id::LookupApplicationByIdError,
    },
    #[snafu(display("Search_for_application_boxes error: {error:?}"))]
    SearchForApplicationBoxes {
        error: search_for_application_boxes::SearchForApplicationBoxesError,
    },
    #[snafu(display("Lookup_application_box_by_id_and_name error: {error:?}"))]
    LookupApplicationBoxByIdAndName {
        error: lookup_application_box_by_id_and_name::LookupApplicationBoxByIdAndNameError,
    },
    #[snafu(display("Lookup_application_logs_by_id error: {error:?}"))]
    LookupApplicationLogsById {
        error: lookup_application_logs_by_id::LookupApplicationLogsByIdError,
    },
    #[snafu(display("Search_for_assets error: {error:?}"))]
    SearchForAssets {
        error: search_for_assets::SearchForAssetsError,
    },
    #[snafu(display("Lookup_asset_by_id error: {error:?}"))]
    LookupAssetById {
        error: lookup_asset_by_id::LookupAssetByIdError,
    },
    #[snafu(display("Lookup_asset_balances error: {error:?}"))]
    LookupAssetBalances {
        error: lookup_asset_balances::LookupAssetBalancesError,
    },
    #[snafu(display("Lookup_asset_transactions error: {error:?}"))]
    LookupAssetTransactions {
        error: lookup_asset_transactions::LookupAssetTransactionsError,
    },
    #[snafu(display("Search_for_block_headers error: {error:?}"))]
    SearchForBlockHeaders {
        error: search_for_block_headers::SearchForBlockHeadersError,
    },
    #[snafu(display("Lookup_block error: {error:?}"))]
    LookupBlock {
        error: lookup_block::LookupBlockError,
    },
    #[snafu(display("Lookup_transaction error: {error:?}"))]
    LookupTransaction {
        error: lookup_transaction::LookupTransactionError,
    },
    #[snafu(display("Search_for_transactions error: {error:?}"))]
    SearchForTransactions {
        error: search_for_transactions::SearchForTransactionsError,
    },
    #[snafu(display("Unknown API error: {message}"))]
    Unknown { message: String },
}

impl From<make_health_check::MakeHealthCheckError> for IndexerApiError {
    fn from(err: make_health_check::MakeHealthCheckError) -> Self {
        IndexerApiError::MakeHealthCheck { error: err }
    }
}

impl From<search_for_accounts::SearchForAccountsError> for IndexerApiError {
    fn from(err: search_for_accounts::SearchForAccountsError) -> Self {
        IndexerApiError::SearchForAccounts { error: err }
    }
}

impl From<lookup_account_by_id::LookupAccountByIdError> for IndexerApiError {
    fn from(err: lookup_account_by_id::LookupAccountByIdError) -> Self {
        IndexerApiError::LookupAccountById { error: err }
    }
}

impl From<lookup_account_assets::LookupAccountAssetsError> for IndexerApiError {
    fn from(err: lookup_account_assets::LookupAccountAssetsError) -> Self {
        IndexerApiError::LookupAccountAssets { error: err }
    }
}

impl From<lookup_account_created_assets::LookupAccountCreatedAssetsError> for IndexerApiError {
    fn from(err: lookup_account_created_assets::LookupAccountCreatedAssetsError) -> Self {
        IndexerApiError::LookupAccountCreatedAssets { error: err }
    }
}

impl From<lookup_account_app_local_states::LookupAccountAppLocalStatesError> for IndexerApiError {
    fn from(err: lookup_account_app_local_states::LookupAccountAppLocalStatesError) -> Self {
        IndexerApiError::LookupAccountAppLocalStates { error: err }
    }
}

impl From<lookup_account_created_applications::LookupAccountCreatedApplicationsError>
    for IndexerApiError
{
    fn from(
        err: lookup_account_created_applications::LookupAccountCreatedApplicationsError,
    ) -> Self {
        IndexerApiError::LookupAccountCreatedApplications { error: err }
    }
}

impl From<lookup_account_transactions::LookupAccountTransactionsError> for IndexerApiError {
    fn from(err: lookup_account_transactions::LookupAccountTransactionsError) -> Self {
        IndexerApiError::LookupAccountTransactions { error: err }
    }
}

impl From<search_for_applications::SearchForApplicationsError> for IndexerApiError {
    fn from(err: search_for_applications::SearchForApplicationsError) -> Self {
        IndexerApiError::SearchForApplications { error: err }
    }
}

impl From<lookup_application_by_id::LookupApplicationByIdError> for IndexerApiError {
    fn from(err: lookup_application_by_id::LookupApplicationByIdError) -> Self {
        IndexerApiError::LookupApplicationById { error: err }
    }
}

impl From<search_for_application_boxes::SearchForApplicationBoxesError> for IndexerApiError {
    fn from(err: search_for_application_boxes::SearchForApplicationBoxesError) -> Self {
        IndexerApiError::SearchForApplicationBoxes { error: err }
    }
}

impl From<lookup_application_box_by_id_and_name::LookupApplicationBoxByIdAndNameError>
    for IndexerApiError
{
    fn from(
        err: lookup_application_box_by_id_and_name::LookupApplicationBoxByIdAndNameError,
    ) -> Self {
        IndexerApiError::LookupApplicationBoxByIdAndName { error: err }
    }
}

impl From<lookup_application_logs_by_id::LookupApplicationLogsByIdError> for IndexerApiError {
    fn from(err: lookup_application_logs_by_id::LookupApplicationLogsByIdError) -> Self {
        IndexerApiError::LookupApplicationLogsById { error: err }
    }
}

impl From<search_for_assets::SearchForAssetsError> for IndexerApiError {
    fn from(err: search_for_assets::SearchForAssetsError) -> Self {
        IndexerApiError::SearchForAssets { error: err }
    }
}

impl From<lookup_asset_by_id::LookupAssetByIdError> for IndexerApiError {
    fn from(err: lookup_asset_by_id::LookupAssetByIdError) -> Self {
        IndexerApiError::LookupAssetById { error: err }
    }
}

impl From<lookup_asset_balances::LookupAssetBalancesError> for IndexerApiError {
    fn from(err: lookup_asset_balances::LookupAssetBalancesError) -> Self {
        IndexerApiError::LookupAssetBalances { error: err }
    }
}

impl From<lookup_asset_transactions::LookupAssetTransactionsError> for IndexerApiError {
    fn from(err: lookup_asset_transactions::LookupAssetTransactionsError) -> Self {
        IndexerApiError::LookupAssetTransactions { error: err }
    }
}

impl From<search_for_block_headers::SearchForBlockHeadersError> for IndexerApiError {
    fn from(err: search_for_block_headers::SearchForBlockHeadersError) -> Self {
        IndexerApiError::SearchForBlockHeaders { error: err }
    }
}

impl From<lookup_block::LookupBlockError> for IndexerApiError {
    fn from(err: lookup_block::LookupBlockError) -> Self {
        IndexerApiError::LookupBlock { error: err }
    }
}

impl From<lookup_transaction::LookupTransactionError> for IndexerApiError {
    fn from(err: lookup_transaction::LookupTransactionError) -> Self {
        IndexerApiError::LookupTransaction { error: err }
    }
}

impl From<search_for_transactions::SearchForTransactionsError> for IndexerApiError {
    fn from(err: search_for_transactions::SearchForTransactionsError) -> Self {
        IndexerApiError::SearchForTransactions { error: err }
    }
}

/// The main error type for all indexer client operations
#[derive(Debug, Snafu)]
pub enum Error {
    #[snafu(display("HTTP error: {source}"))]
    Http {
        source: algokit_http_client::HttpError,
    },
    #[snafu(display("Serialization error: {message}"))]
    Serde { message: String },
    #[snafu(display("API error: {source}"))]
    Api { source: IndexerApiError },
}

#[derive(Debug, PartialEq, Eq)]
pub enum ContentType {
    Json,
    MsgPack,
    Text,
    Unsupported(String),
}

impl From<&str> for ContentType {
    fn from(content_type: &str) -> Self {
        if content_type.contains("application/json") {
            ContentType::Json
        } else if content_type.contains("application/msgpack") {
            ContentType::MsgPack
        } else if content_type.contains("text/plain") {
            ContentType::Text
        } else {
            ContentType::Unsupported(content_type.to_string())
        }
    }
}

pub fn urlencode<T: AsRef<str>>(s: T) -> String {
    ::url::form_urlencoded::byte_serialize(s.as_ref().as_bytes()).collect()
}

// Re-export the consolidated client
pub use client::IndexerClient;

// Re-export parameter enums
pub use parameter_enums::*;

// Re-export all endpoint functions
pub use lookup_account_app_local_states::{
    LookupAccountAppLocalStatesError, lookup_account_app_local_states,
};
pub use lookup_account_assets::{LookupAccountAssetsError, lookup_account_assets};
pub use lookup_account_by_id::{LookupAccountByIdError, lookup_account_by_id};
pub use lookup_account_created_applications::{
    LookupAccountCreatedApplicationsError, lookup_account_created_applications,
};
pub use lookup_account_created_assets::{
    LookupAccountCreatedAssetsError, lookup_account_created_assets,
};
pub use lookup_account_transactions::{
    LookupAccountTransactionsError, lookup_account_transactions,
};
pub use lookup_application_box_by_id_and_name::{
    LookupApplicationBoxByIdAndNameError, lookup_application_box_by_id_and_name,
};
pub use lookup_application_by_id::{LookupApplicationByIdError, lookup_application_by_id};
pub use lookup_application_logs_by_id::{
    LookupApplicationLogsByIdError, lookup_application_logs_by_id,
};
pub use lookup_asset_balances::{LookupAssetBalancesError, lookup_asset_balances};
pub use lookup_asset_by_id::{LookupAssetByIdError, lookup_asset_by_id};
pub use lookup_asset_transactions::{LookupAssetTransactionsError, lookup_asset_transactions};
pub use lookup_block::{LookupBlockError, lookup_block};
pub use lookup_transaction::{LookupTransactionError, lookup_transaction};
pub use make_health_check::{MakeHealthCheckError, make_health_check};
pub use search_for_accounts::{SearchForAccountsError, search_for_accounts};
pub use search_for_application_boxes::{
    SearchForApplicationBoxesError, search_for_application_boxes,
};
pub use search_for_applications::{SearchForApplicationsError, search_for_applications};
pub use search_for_assets::{SearchForAssetsError, search_for_assets};
pub use search_for_block_headers::{SearchForBlockHeadersError, search_for_block_headers};
pub use search_for_transactions::{SearchForTransactionsError, search_for_transactions};
