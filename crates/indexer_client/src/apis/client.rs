/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use super::Error;
use super::parameter_enums::*;
use crate::models::{
    Block, Box, HealthCheck, LookupAccountAppLocalStates, LookupAccountAssets, LookupAccountById,
    LookupAccountCreatedApplications, LookupAccountCreatedAssets, LookupAccountTransactions,
    LookupApplicationById, LookupApplicationLogsById, LookupAssetBalances, LookupAssetById,
    LookupAssetTransactions, LookupTransaction, SearchForAccounts, SearchForApplicationBoxes,
    SearchForApplications, SearchForAssets, SearchForBlockHeaders, SearchForTransactions,
};
use algokit_http_client::{DefaultHttpClient, HttpClient};
use std::sync::Arc;

/// The main Indexer API client.
///
/// This client provides convenient access to all Indexer API endpoints.
/// It wraps the lower-level endpoint functions with a more ergonomic interface.
/// All methods return a unified `Error` type that can represent any endpoint error.
#[derive(Clone)]
pub struct IndexerClient {
    http_client: Arc<dyn HttpClient>,
}

impl IndexerClient {
    /// Create a new IndexerClient with a custom http client.
    pub fn new(http_client: Arc<dyn HttpClient>) -> Self {
        Self { http_client }
    }

    /// Create a new IndexerClient for Algorand TestNet.
    #[cfg(feature = "default_client")]
    pub fn testnet() -> Self {
        let http_client = Arc::new(DefaultHttpClient::new(
            "https://testnet-idx.4160.nodely.dev",
        ));
        Self::new(http_client)
    }

    /// Create a new IndexerClient for Algorand MainNet.
    #[cfg(feature = "default_client")]
    pub fn mainnet() -> Self {
        let http_client = Arc::new(DefaultHttpClient::new(
            "https://mainnet-idx.4160.nodely.dev",
        ));
        Self::new(http_client)
    }

    /// Create a new IndexerClient for a local localnet environment.
    #[cfg(feature = "default_client")]
    pub fn localnet() -> Self {
        let http_client = Arc::new(
            DefaultHttpClient::with_header(
                "http://localhost:8980",
                "X-Indexer-API-Token",
                "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            )
            .expect("Failed to create HTTP client with API token header"),
        );
        Self::new(http_client)
    }

    /// Returns 200 if healthy.
    pub async fn make_health_check(&self) -> Result<HealthCheck, Error> {
        super::make_health_check::make_health_check(self.http_client.as_ref()).await
    }

    /// Search for accounts.
    pub async fn search_for_accounts(
        &self,
        asset_id: Option<u64>,
        limit: Option<u64>,
        next: Option<&str>,
        currency_greater_than: Option<u64>,
        include_all: Option<bool>,
        exclude: Option<Vec<String>>,
        currency_less_than: Option<u64>,
        auth_addr: Option<&str>,
        round: Option<u64>,
        application_id: Option<u64>,
        online_only: Option<bool>,
    ) -> Result<SearchForAccounts, Error> {
        super::search_for_accounts::search_for_accounts(
            self.http_client.as_ref(),
            asset_id,
            limit,
            next,
            currency_greater_than,
            include_all,
            exclude,
            currency_less_than,
            auth_addr,
            round,
            application_id,
            online_only,
        )
        .await
    }

    /// Lookup account information.
    pub async fn lookup_account_by_id(
        &self,
        account_id: &str,
        round: Option<u64>,
        include_all: Option<bool>,
        exclude: Option<Vec<String>>,
    ) -> Result<LookupAccountById, Error> {
        super::lookup_account_by_id::lookup_account_by_id(
            self.http_client.as_ref(),
            account_id,
            round,
            include_all,
            exclude,
        )
        .await
    }

    /// Lookup an account's asset holdings, optionally for a specific ID.
    pub async fn lookup_account_assets(
        &self,
        account_id: &str,
        asset_id: Option<u64>,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<LookupAccountAssets, Error> {
        super::lookup_account_assets::lookup_account_assets(
            self.http_client.as_ref(),
            account_id,
            asset_id,
            include_all,
            limit,
            next,
        )
        .await
    }

    /// Lookup an account's created asset parameters, optionally for a specific ID.
    pub async fn lookup_account_created_assets(
        &self,
        account_id: &str,
        asset_id: Option<u64>,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<LookupAccountCreatedAssets, Error> {
        super::lookup_account_created_assets::lookup_account_created_assets(
            self.http_client.as_ref(),
            account_id,
            asset_id,
            include_all,
            limit,
            next,
        )
        .await
    }

    /// Lookup an account's asset holdings, optionally for a specific ID.
    pub async fn lookup_account_app_local_states(
        &self,
        account_id: &str,
        application_id: Option<u64>,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<LookupAccountAppLocalStates, Error> {
        super::lookup_account_app_local_states::lookup_account_app_local_states(
            self.http_client.as_ref(),
            account_id,
            application_id,
            include_all,
            limit,
            next,
        )
        .await
    }

    /// Lookup an account's created application parameters, optionally for a specific ID.
    pub async fn lookup_account_created_applications(
        &self,
        account_id: &str,
        application_id: Option<u64>,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<LookupAccountCreatedApplications, Error> {
        super::lookup_account_created_applications::lookup_account_created_applications(
            self.http_client.as_ref(),
            account_id,
            application_id,
            include_all,
            limit,
            next,
        )
        .await
    }

    /// Lookup account transactions. Transactions are returned newest to oldest.
    pub async fn lookup_account_transactions(
        &self,
        limit: Option<u64>,
        next: Option<&str>,
        note_prefix: Option<&str>,
        tx_type: Option<TxType>,
        sig_type: Option<SigType>,
        txid: Option<&str>,
        round: Option<u64>,
        min_round: Option<u64>,
        max_round: Option<u64>,
        asset_id: Option<u64>,
        before_time: Option<&str>,
        after_time: Option<&str>,
        currency_greater_than: Option<u64>,
        currency_less_than: Option<u64>,
        account_id: &str,
        rekey_to: Option<bool>,
    ) -> Result<LookupAccountTransactions, Error> {
        super::lookup_account_transactions::lookup_account_transactions(
            self.http_client.as_ref(),
            limit,
            next,
            note_prefix,
            tx_type,
            sig_type,
            txid,
            round,
            min_round,
            max_round,
            asset_id,
            before_time,
            after_time,
            currency_greater_than,
            currency_less_than,
            account_id,
            rekey_to,
        )
        .await
    }

    /// Search for applications
    pub async fn search_for_applications(
        &self,
        application_id: Option<u64>,
        creator: Option<&str>,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<SearchForApplications, Error> {
        super::search_for_applications::search_for_applications(
            self.http_client.as_ref(),
            application_id,
            creator,
            include_all,
            limit,
            next,
        )
        .await
    }

    /// Lookup application.
    pub async fn lookup_application_by_id(
        &self,
        application_id: u64,
        include_all: Option<bool>,
    ) -> Result<LookupApplicationById, Error> {
        super::lookup_application_by_id::lookup_application_by_id(
            self.http_client.as_ref(),
            application_id,
            include_all,
        )
        .await
    }

    /// Get box names for a given application.
    pub async fn search_for_application_boxes(
        &self,
        application_id: u64,
        limit: Option<u64>,
        next: Option<&str>,
    ) -> Result<SearchForApplicationBoxes, Error> {
        super::search_for_application_boxes::search_for_application_boxes(
            self.http_client.as_ref(),
            application_id,
            limit,
            next,
        )
        .await
    }

    /// Get box information for a given application.
    pub async fn lookup_application_box_by_id_and_name(
        &self,
        application_id: u64,
        name: &str,
    ) -> Result<crate::models::Box, Error> {
        super::lookup_application_box_by_id_and_name::lookup_application_box_by_id_and_name(
            self.http_client.as_ref(),
            application_id,
            name,
        )
        .await
    }

    /// Lookup application logs.
    pub async fn lookup_application_logs_by_id(
        &self,
        application_id: u64,
        limit: Option<u64>,
        next: Option<&str>,
        txid: Option<&str>,
        min_round: Option<u64>,
        max_round: Option<u64>,
        sender_address: Option<&str>,
    ) -> Result<LookupApplicationLogsById, Error> {
        super::lookup_application_logs_by_id::lookup_application_logs_by_id(
            self.http_client.as_ref(),
            application_id,
            limit,
            next,
            txid,
            min_round,
            max_round,
            sender_address,
        )
        .await
    }

    /// Search for assets.
    pub async fn search_for_assets(
        &self,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
        creator: Option<&str>,
        name: Option<&str>,
        unit: Option<&str>,
        asset_id: Option<u64>,
    ) -> Result<SearchForAssets, Error> {
        super::search_for_assets::search_for_assets(
            self.http_client.as_ref(),
            include_all,
            limit,
            next,
            creator,
            name,
            unit,
            asset_id,
        )
        .await
    }

    /// Lookup asset information.
    pub async fn lookup_asset_by_id(
        &self,
        asset_id: u64,
        include_all: Option<bool>,
    ) -> Result<LookupAssetById, Error> {
        super::lookup_asset_by_id::lookup_asset_by_id(
            self.http_client.as_ref(),
            asset_id,
            include_all,
        )
        .await
    }

    /// Lookup the list of accounts who hold this asset
    pub async fn lookup_asset_balances(
        &self,
        include_all: Option<bool>,
        limit: Option<u64>,
        next: Option<&str>,
        currency_greater_than: Option<u64>,
        currency_less_than: Option<u64>,
        asset_id: u64,
    ) -> Result<LookupAssetBalances, Error> {
        super::lookup_asset_balances::lookup_asset_balances(
            self.http_client.as_ref(),
            include_all,
            limit,
            next,
            currency_greater_than,
            currency_less_than,
            asset_id,
        )
        .await
    }

    /// Lookup transactions for an asset. Transactions are returned oldest to newest.
    pub async fn lookup_asset_transactions(
        &self,
        limit: Option<u64>,
        next: Option<&str>,
        note_prefix: Option<&str>,
        tx_type: Option<TxType>,
        sig_type: Option<SigType>,
        txid: Option<&str>,
        round: Option<u64>,
        min_round: Option<u64>,
        max_round: Option<u64>,
        before_time: Option<&str>,
        after_time: Option<&str>,
        currency_greater_than: Option<u64>,
        currency_less_than: Option<u64>,
        address: Option<&str>,
        address_role: Option<AddressRole>,
        exclude_close_to: Option<bool>,
        asset_id: u64,
        rekey_to: Option<bool>,
    ) -> Result<LookupAssetTransactions, Error> {
        super::lookup_asset_transactions::lookup_asset_transactions(
            self.http_client.as_ref(),
            limit,
            next,
            note_prefix,
            tx_type,
            sig_type,
            txid,
            round,
            min_round,
            max_round,
            before_time,
            after_time,
            currency_greater_than,
            currency_less_than,
            address,
            address_role,
            exclude_close_to,
            asset_id,
            rekey_to,
        )
        .await
    }

    /// Search for block headers. Block headers are returned in ascending round order. Transactions are not included in the output.
    pub async fn search_for_block_headers(
        &self,
        limit: Option<u64>,
        next: Option<&str>,
        min_round: Option<u64>,
        max_round: Option<u64>,
        before_time: Option<&str>,
        after_time: Option<&str>,
        proposers: Option<Vec<String>>,
        expired: Option<Vec<String>>,
        absent: Option<Vec<String>>,
    ) -> Result<SearchForBlockHeaders, Error> {
        super::search_for_block_headers::search_for_block_headers(
            self.http_client.as_ref(),
            limit,
            next,
            min_round,
            max_round,
            before_time,
            after_time,
            proposers,
            expired,
            absent,
        )
        .await
    }

    /// Lookup block.
    pub async fn lookup_block(
        &self,
        round_number: u64,
        header_only: Option<bool>,
    ) -> Result<Block, Error> {
        super::lookup_block::lookup_block(self.http_client.as_ref(), round_number, header_only)
            .await
    }

    /// Lookup a single transaction.
    pub async fn lookup_transaction(&self, txid: &str) -> Result<LookupTransaction, Error> {
        super::lookup_transaction::lookup_transaction(self.http_client.as_ref(), txid).await
    }

    /// Search for transactions. Transactions are returned oldest to newest unless the address parameter is used, in which case results are returned newest to oldest.
    pub async fn search_for_transactions(
        &self,
        limit: Option<u64>,
        next: Option<&str>,
        note_prefix: Option<&str>,
        tx_type: Option<TxType>,
        sig_type: Option<SigType>,
        group_id: Option<&str>,
        txid: Option<&str>,
        round: Option<u64>,
        min_round: Option<u64>,
        max_round: Option<u64>,
        asset_id: Option<u64>,
        before_time: Option<&str>,
        after_time: Option<&str>,
        currency_greater_than: Option<u64>,
        currency_less_than: Option<u64>,
        address: Option<&str>,
        address_role: Option<AddressRole>,
        exclude_close_to: Option<bool>,
        rekey_to: Option<bool>,
        application_id: Option<u64>,
    ) -> Result<SearchForTransactions, Error> {
        super::search_for_transactions::search_for_transactions(
            self.http_client.as_ref(),
            limit,
            next,
            note_prefix,
            tx_type,
            sig_type,
            group_id,
            txid,
            round,
            min_round,
            max_round,
            asset_id,
            before_time,
            after_time,
            currency_greater_than,
            currency_less_than,
            address,
            address_role,
            exclude_close_to,
            rekey_to,
            application_id,
        )
        .await
    }
}
