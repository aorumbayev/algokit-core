/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::parameter_enums::*;
use super::{ContentType, Error, IndexerApiError};

// Import all custom types used by this endpoint
use crate::models::LookupAccountTransactions;

// Import request body type if needed

/// struct for typed errors of method [`lookup_account_transactions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum LookupAccountTransactionsError {
    Status400(serde_json::Value),
    Status500(serde_json::Value),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// Lookup account transactions. Transactions are returned newest to oldest.
pub async fn lookup_account_transactions(
    http_client: &dyn HttpClient,
    limit: Option<u64>,
    next: Option<&str>,
    note_prefix: Option<&str>,
    tx_type: Option<TxType>,
    sig_type: Option<SigType>,
    txid: Option<&str>,
    round: Option<u64>,
    min_round: Option<u64>,
    max_round: Option<u64>,
    asset_id: Option<u64>,
    before_time: Option<&str>,
    after_time: Option<&str>,
    currency_greater_than: Option<u64>,
    currency_less_than: Option<u64>,
    account_id: &str,
    rekey_to: Option<bool>,
) -> Result<LookupAccountTransactions, Error> {
    let p_limit = limit;
    let p_next = next;
    let p_note_prefix = note_prefix;
    let p_tx_type = tx_type;
    let p_sig_type = sig_type;
    let p_txid = txid;
    let p_round = round;
    let p_min_round = min_round;
    let p_max_round = max_round;
    let p_asset_id = asset_id;
    let p_before_time = before_time;
    let p_after_time = after_time;
    let p_currency_greater_than = currency_greater_than;
    let p_currency_less_than = currency_less_than;
    let p_account_id = account_id;
    let p_rekey_to = rekey_to;

    let path = format!(
        "/v2/accounts/{account_id}/transactions",
        account_id = crate::apis::urlencode(p_account_id)
    );

    let mut query_params: HashMap<String, String> = HashMap::new();
    if let Some(value) = p_limit {
        query_params.insert("limit".to_string(), value.to_string());
    }
    if let Some(value) = p_next {
        query_params.insert("next".to_string(), value.to_string());
    }
    if let Some(value) = p_note_prefix {
        query_params.insert("note-prefix".to_string(), value.to_string());
    }
    if let Some(value) = p_tx_type {
        query_params.insert("tx-type".to_string(), value.to_string());
    }
    if let Some(value) = p_sig_type {
        query_params.insert("sig-type".to_string(), value.to_string());
    }
    if let Some(value) = p_txid {
        query_params.insert("txid".to_string(), value.to_string());
    }
    if let Some(value) = p_round {
        query_params.insert("round".to_string(), value.to_string());
    }
    if let Some(value) = p_min_round {
        query_params.insert("min-round".to_string(), value.to_string());
    }
    if let Some(value) = p_max_round {
        query_params.insert("max-round".to_string(), value.to_string());
    }
    if let Some(value) = p_asset_id {
        query_params.insert("asset-id".to_string(), value.to_string());
    }
    if let Some(value) = p_before_time {
        query_params.insert("before-time".to_string(), value.to_string());
    }
    if let Some(value) = p_after_time {
        query_params.insert("after-time".to_string(), value.to_string());
    }
    if let Some(value) = p_currency_greater_than {
        query_params.insert("currency-greater-than".to_string(), value.to_string());
    }
    if let Some(value) = p_currency_less_than {
        query_params.insert("currency-less-than".to_string(), value.to_string());
    }
    if let Some(value) = p_rekey_to {
        query_params.insert("rekey-to".to_string(), value.to_string());
    }

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert("Content-Type".to_string(), "application/json".to_string());
    headers.insert("Accept".to_string(), "application/json".to_string());

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Get,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(Error::Http)?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => {
            serde_json::from_slice(&response.body).map_err(|e| Error::Serde(e.to_string()))
        }
        ContentType::MsgPack => Err(Error::Serde("MsgPack not supported".to_string())),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde(e.to_string()))?;
            Err(Error::Serde(format!("Unexpected text response: {}", text)))
        }
        ContentType::Unsupported(ct) => {
            Err(Error::Serde(format!("Unsupported content type: {}", ct)))
        }
    }
}
