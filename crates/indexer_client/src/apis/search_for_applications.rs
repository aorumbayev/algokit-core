/*
 * Indexer
 *
 * Algorand ledger analytics API.
 *
 * The version of the OpenAPI document: 2.0
 * Generated by: Rust OpenAPI Generator
 */

use algokit_http_client::{HttpClient, HttpMethod};
use serde::{Deserialize, Serialize};
use std::collections::HashMap;

use super::{ContentType, Error, IndexerApiError};

// Import all custom types used by this endpoint
use crate::models::SearchForApplications;

// Import request body type if needed

/// struct for typed errors of method [`search_for_applications`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchForApplicationsError {
    Status500(serde_json::Value),
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// Search for applications
pub async fn search_for_applications(
    http_client: &dyn HttpClient,
    application_id: Option<u64>,
    creator: Option<&str>,
    include_all: Option<bool>,
    limit: Option<u64>,
    next: Option<&str>,
) -> Result<SearchForApplications, Error> {
    let p_application_id = application_id;
    let p_creator = creator;
    let p_include_all = include_all;
    let p_limit = limit;
    let p_next = next;

    let path = "/v2/applications".to_string();

    let mut query_params: HashMap<String, String> = HashMap::new();
    if let Some(value) = p_application_id {
        query_params.insert("application-id".to_string(), value.to_string());
    }
    if let Some(value) = p_creator {
        query_params.insert("creator".to_string(), value.to_string());
    }
    if let Some(value) = p_include_all {
        query_params.insert("include-all".to_string(), value.to_string());
    }
    if let Some(value) = p_limit {
        query_params.insert("limit".to_string(), value.to_string());
    }
    if let Some(value) = p_next {
        query_params.insert("next".to_string(), value.to_string());
    }

    let mut headers: HashMap<String, String> = HashMap::new();
    headers.insert("Content-Type".to_string(), "application/json".to_string());
    headers.insert("Accept".to_string(), "application/json".to_string());

    let body = None;

    let response = http_client
        .request(
            HttpMethod::Get,
            path,
            Some(query_params),
            body,
            Some(headers),
        )
        .await
        .map_err(|e| Error::Http { source: e })?;

    let content_type = response
        .headers
        .get("content-type")
        .map(|s| s.as_str())
        .unwrap_or("application/json");

    match ContentType::from(content_type) {
        ContentType::Json => serde_json::from_slice(&response.body).map_err(|e| Error::Serde {
            message: e.to_string(),
        }),
        ContentType::MsgPack => Err(Error::Serde {
            message: "MsgPack not supported".to_string(),
        }),
        ContentType::Text => {
            let text = String::from_utf8(response.body).map_err(|e| Error::Serde {
                message: e.to_string(),
            })?;
            Err(Error::Serde {
                message: format!("Unexpected text response: {}", text),
            })
        }
        ContentType::Unsupported(ct) => Err(Error::Serde {
            message: format!("Unsupported content type: {}", ct),
        }),
    }
}
